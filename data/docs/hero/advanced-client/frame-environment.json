{
  "content": "<h1 id=\"frameenvironment\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#frameenvironment\">#</a>FrameEnvironment</h1>\n<p>A FrameEnvironment represents a browsing context which allows you to interact with a Document in the page just like an iFrame or Frame in a normal HTML Document. A FrameEnvironment is one of many in a Tab that controls a document with its own page lifecycle and resources. Many of the FrameEnvironment methods for the \"main\" document are available from the Tab object.</p>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<p>Frames cannot be constructed in Hero. They're made available through the <a href=\"/docs/hero/advanced-client/tab#frame-environments\">tab.frameEnvironments</a> array.</p>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"child-frames\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#child-frames\">#</a>frameEnvironment.children</h3>\n<p>Returns child FrameEnvironments for this frame.</p>\n<h4 id=\"type-promiseframeenvironment\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promiseframeenvironment\">#</a><strong>Type</strong>: Promise&#x3C;<a href=\"/docs/hero/advanced-client/tab#frame-environments\"><code>FrameEnvironment</code></a>[]></h4>\n<h3 id=\"cookie-storage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cookie-storage\">#</a>frameEnvironment.cookieStorage</h3>\n<p>Returns a <a href=\"/docs/hero/advanced-client/cookie-storage\">CookieStorage</a> instance to get/set/delete cookies.</p>\n<h4 id=\"type-cookiestorage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-cookiestorage\">#</a><strong>Type</strong>: <a href=\"/docs/hero/advanced-client/cookie-storage\"><code>CookieStorage</code></a></h4>\n<h3 id=\"document\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#document\">#</a>frameEnvironment.document <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a reference to the document of the frameEnvironment.</p>\n<h4 id=\"type-superdocument\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-superdocument\">#</a><strong>Type</strong>: <a href=\"/docs/hero/awaited-dom/super-document\"><code>SuperDocument</code></a></h4>\n<h3 id=\"frameid\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#frameid\">#</a>frameEnvironment.frameId</h3>\n<p>An identifier for the frameEnvironment.</p>\n<h4 id=\"type-promisenumber\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisenumber\">#</a><strong>Type</strong>: <code>Promise&#x3C;number></code></h4>\n<h3 id=\"is-all-content-loaded\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#is-all-content-loaded\">#</a>frameEnvironment.isAllContentLoaded</h3>\n<p><code>True</code> if the \"load\" event has triggered in this frame.</p>\n<p>Wait for this event to trigger with <a href=\"#wait-for-load\">waitForLoad(AllContentLoaded)</a></p>\n<h4 id=\"type-promiseboolean\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promiseboolean\">#</a><strong>Type</strong>: <code>Promise&#x3C;boolean></code></h4>\n<h3 id=\"is-dom-content-loaded\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#is-dom-content-loaded\">#</a>frameEnvironment.isDomContentLoaded</h3>\n<p><code>True</code> if the \"DOMContentLoaded\" event has triggered in this frame.</p>\n<p>Wait for this event to trigger with <a href=\"#wait-for-load\">waitForLoad(DomContentLoaded)</a></p>\n<h4 id=\"type-promiseboolean-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promiseboolean-1\">#</a><strong>Type</strong>: <code>Promise&#x3C;boolean></code></h4>\n<h3 id=\"is-painting-stable\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#is-painting-stable\">#</a>frameEnvironment.isPaintingStable</h3>\n<p><code>True</code> if this frame has loaded visible content above the fold. Works on javascript-rendered pages.</p>\n<p>NOTE: if a frame has no visible content, this property will never return true.</p>\n<p>Wait for this event to trigger with <a href=\"#wait-for-painting-stable\">waitForPaintingStable()</a></p>\n<h4 id=\"type-promiseboolean-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promiseboolean-2\">#</a><strong>Type</strong>: <code>Promise&#x3C;boolean></code></h4>\n<h3 id=\"lastCommandId\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lastCommandId\">#</a>frameEnvironment.lastCommandId</h3>\n<p>An execution point that refers to a command run on this Hero instance (<code>waitForElement</code>, <code>click</code>, <code>type</code>, etc). Command ids can be passed to select <code>waitFor*</code> functions to indicate a starting point to listen for changes.</p>\n<h4 id=\"type-promisenumber-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisenumber-1\">#</a><strong>Type</strong>: <code>Promise&#x3C;number></code></h4>\n<h3 id=\"local-storage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#local-storage\">#</a>frameEnvironment.localStorage <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a reference to the <a href=\"/docs/hero/awaited-dom/storage\">Storage</a> object managing localStorage for the frameEnvironment.</p>\n<h4 id=\"type-storage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-storage\">#</a><strong>Type</strong>: <a href=\"/docs/hero/awaited-dom/storage\"><code>Storage</code></a></h4>\n<h3 id=\"parent-frameid\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#parent-frameid\">#</a>frameEnvironment.parentFrameId</h3>\n<p>An identifier for the parent frame, if it exists. <code>null</code> for the main FrameEnvironment.</p>\n<h4 id=\"type-promisestring\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisestring\">#</a><strong>Type</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"name\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#name\">#</a>frameEnvironment.name</h3>\n<p>Returns the name given to the frame DOM element. NOTE: this name is not populated until the frame has navigated to the destination url.</p>\n<h4 id=\"type-promisestring-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisestring-1\">#</a><strong>Type</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"session-storage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#session-storage\">#</a>frameEnvironment.sessionStorage <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a reference to the <a href=\"/docs/hero/awaited-dom/storage\">Storage</a> object managing sessionStorage for the frameEnvironment.</p>\n<h4 id=\"type-storage-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-storage-1\">#</a><strong>Type</strong>: <a href=\"/docs/hero/awaited-dom/storage\"><code>Storage</code></a></h4>\n<h3 id=\"url\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#url\">#</a>frameEnvironment.url</h3>\n<p>The url of the active frameEnvironment.</p>\n<h4 id=\"type-promisestring-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisestring-2\">#</a><strong>Type</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"request-type\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#request-type\">#</a>frameEnvironment.Request <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a constructor for a <a href=\"/docs/hero/awaited-dom/request\">Request</a> object that can be sent to <a href=\"#fetch\">frameEnvironment.fetch(request.md)</a>.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const { Request, fetch } = hero;\nconst url = 'https://ulixee.org/docs';\nconst request = new Request(url, {\n  headers: {\n    'X-From': 'https://ulixee.org',\n  },\n});\nconst response = await fetch(request);\n</code></pre>\n<h4 id=\"type-request\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-request\">#</a><strong>Type</strong>: <a href=\"/docs/hero/awaited-dom/request\"><code>Request</code></a></h4>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"fetch\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#fetch\">#</a>frameEnvironment.fetch <em>(requestInput, requestInit)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Perform a native \"fetch\" request in the current frame environment.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>requestInput <code>IRequestInput</code> A <a href=\"#request-type\">Request</a> object or url.</li>\n<li>requestInit <code>IRequestInit?</code> Optional request initialization parameters. Follows w3c specification.\n<ul>\n<li>Inbound Body currently supports: <code>string</code>, <code>ArrayBuffer</code>, <code>null</code>.</li>\n<li>Not supported: <code>Blob</code>, <code>FormData</code>, <code>ReadableStream</code>, <code>URLSearchParams</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promiseresponse\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseresponse\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/awaited-dom/response\"><code>Promise&#x3C;Response></code></a></h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const origin = 'https://ulixee.org/';\nconst getUrl = 'https://ulixee.org/docs/hero';\n\nawait hero.goto(origin);\nconst mainFrame = hero.mainFrameEnvironment;\nconst response = await mainFrame.fetch(getUrl);\n</code></pre>\n<p>Http Post example with a body:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const origin = 'https://ulixee.org/';\nconst postUrl = 'https://ulixee.org/nopost';\n\nawait hero.goto(origin);\nconst mainFrame = hero.mainFrameEnvironment;\nconst response = await mainFrame.fetch(postUrl, {\n  method: 'post',\n  headers: {\n    Authorization: 'Basic ZWx1c3VhcmlvOnlsYWNsYXZl',\n  },\n  body: JSON.stringify({\n    ...params,\n  }),\n});\n</code></pre>\n<h3 id=\"get-frame-environment\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#get-frame-environment\">#</a>frameEnvironment.getFrameEnvironment <em>(frameElement)</em></h3>\n<p>Get the <a href=\"/docs/hero/advanced-client/frame-environment\">FrameEnvironment</a> object corresponding to the provided HTMLFrameElement or HTMLIFrameElement. Use this function to attach to the full environment of the given DOM element.</p>\n<h4 id=\"arguments-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-1\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>element <a href=\"/docs/hero/awaited-dom/super-element\"><code>SuperElement</code></a> A frame or iframe element loaded in this frame environment (ie, a direct child element of this frame document.md).</li>\n</ul>\n<h4 id=\"returns-promiseframe\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseframe\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/advanced-client/frame-environment\"><code>Promise&#x3C;Frame></code></a></h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">await hero.goto('https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe');\nconst { document } = hero.activeTab;\nconst iframeElement = document.querySelector('iframe.interactive');\n\nconst iframe = await hero.getFrameEnvironment(iframeElement);\n\nconst h4 = await iframe.document.querySelector('h4').textContent; // should be something like HTML demo: &#x3C;iframe>\n</code></pre>\n<h3 id=\"computed-style\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#computed-style\">#</a>frameEnvironment.getComputedStyle <em>(element, pseudoElement)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Perform a native <code>Window.getComputedStyle</code> request in the current frame context - it returns an object containing the values of all CSS properties of an element, after applying active stylesheets and resolving any basic computation those values may contain. Individual CSS property values are accessed through APIs provided by the object, or by indexing with CSS property names.</p>\n<h4 id=\"arguments-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-2\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>element <a href=\"/docs/hero/awaited-dom/super-element\"><code>SuperElement</code></a> An element loaded in this frame environment.</li>\n<li>pseudoElement <code>string?</code> Optional string specifying the pseudo-element to match (eg, ::before, ::after, etc). More information can be found on <a href=\"https://www.w3.org/TR/css-pseudo-4/\">w3c</a>.</li>\n</ul>\n<h4 id=\"returns-promisecssstyledeclaration\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisecssstyledeclaration\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/awaited-dom/css-style-declaration\"><code>Promise&#x3C;CssStyleDeclaration></code></a></h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">await hero.goto('https://ulixee.org');\nconst { document, getComputedStyle } = hero.activeTab;\nconst selector = document.querySelector('h1');\nconst style = await getComputedStyle(selector);\nconst opacity = await style.getProperty('opacity');\n</code></pre>\n<h3 id=\"get-computed-visibility\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#get-computed-visibility\">#</a>frameEnvironment.getComputedVisibility <em>(element</em></h3>\n<p>Determines if a node from the <a href=\"#main-frame-environment\">mainFrameEnvironment</a> is visible to an end user. This method checks whether a node (or containing element.md) has:</p>\n<ul>\n<li>layout: width, height, x and y.</li>\n<li>opacity: non-zero opacity.</li>\n<li>css visibility: the element does not have a computed style where visibility=hidden.</li>\n<li>no overlay: no other element which overlays more than one fourth of this element and has at least 1 pixel over the center of the element.</li>\n<li>on the visible screen (not beyond the horizontal or vertical viewport.md)</li>\n</ul>\n<p>Alias for <a href=\"/docs/hero/advanced-client/frame-environment#get-computed-visibility\">tab.mainFrameEnvironment.getComputedVisibility</a>.</p>\n<h4 id=\"arguments-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-3\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>node <a href=\"/docs/hero/awaited-dom/super-node\"><code>SuperNode</code></a>. The node to compute visibility.</li>\n</ul>\n<h4 id=\"returns-promiseinodevisibility-boolean-values-indicating-if-the-node-or-closest-elementmd-is-visible-to-an-end-user\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseinodevisibility-boolean-values-indicating-if-the-node-or-closest-elementmd-is-visible-to-an-end-user\">#</a><strong>Returns</strong>: <code>Promise&#x3C;INodeVisibility></code> Boolean values indicating if the node (or closest element.md) is visible to an end user.</h4>\n<ul>\n<li>INodeVisibility <code>object</code>\n<ul>\n<li>isVisible <code>boolean</code>. The node is visible (<code>nodeExists</code>, <code>hasContainingElement</code>, <code>isConnected</code>, <code>hasCssOpacity</code>,<code>hasCssDisplay</code>,<code>hasCssVisibility</code> <code>hasDimensions</code>).</li>\n<li>isClickable <code>boolean</code>. The node is visible, in the viewport and unobstructed (<code>isVisible</code>, <code>isOnscreenVertical</code>, <code>isOnscreenHorizontal</code> and <code>isUnobstructedByOtherElements</code>).</li>\n<li>nodeExists <code>boolean</code>. Was the node found in the DOM.</li>\n<li>isOnscreenVertical <code>boolean</code>. The node is on-screen vertically.</li>\n<li>isOnscreenHorizontal <code>boolean</code>. The node is on-screen horizontally.</li>\n<li>hasContainingElement <code>boolean</code>. The node is an Element or has a containing Element providing layout.</li>\n<li>isConnected <code>boolean</code>. The node is connected to the DOM.</li>\n<li>hasCssOpacity <code>boolean</code>. The display <code>opacity</code> property is not \"0\".</li>\n<li>hasCssDisplay <code>boolean</code>. The display <code>display</code> property is not \"none\".</li>\n<li>hasCssVisibility <code>boolean</code>. The visibility <code>style</code> property is not \"hidden\".</li>\n<li>hasDimensions <code>boolean</code>. The node has width and height.</li>\n<li>isUnobstructedByOtherElements <code>boolean</code>. The node is not hidden or obscured > 50% by another element.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"get-js-value\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#get-js-value\">#</a>frameEnvironment.getJsValue <em>(path)</em></h3>\n<p>Extract any publicly accessible javascript value from the FrameEnvironment.</p>\n<h4 id=\"arguments-4\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-4\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>path <code>string</code></li>\n</ul>\n<h4 id=\"returns-promiseserializedvalue\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseserializedvalue\">#</a><strong>Returns</strong>: <code>Promise&#x3C;SerializedValue></code></h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">await hero.goto('https://ulixee.org');\nconst navigatorAgent = await hero.activeFrame.getJsValue(`navigator.userAgent`);\n</code></pre>\n<h3 id=\"is-element-visible\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#is-element-visible\">#</a>frameEnvironment.isElementVisible <em>(element)</em></h3>\n<p>Determines if an element is visible to an end user. This method checks whether an element has:</p>\n<ul>\n<li>layout: width, height, x and y.</li>\n<li>opacity: non-zero opacity.</li>\n<li>css visibility: the element does not have a computed style where visibility=hidden.</li>\n<li>no overlay: no other element which overlays more than one fourth of this element and has at least 1 pixel over the center of the element.</li>\n</ul>\n<h4 id=\"arguments-5\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-5\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>element <a href=\"/docs/hero/awaited-dom/super-element\"><code>SuperElement</code></a>. The element to determine visibility.</li>\n</ul>\n<h4 id=\"returns-promiseboolean-whether-the-element-is-visible-to-an-end-user\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseboolean-whether-the-element-is-visible-to-an-end-user\">#</a><strong>Returns</strong>: <code>Promise&#x3C;boolean></code> Whether the element is visible to an end user.</h4>\n<h3 id=\"query-selector\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#query-selector\">#</a>frameEnvironment.querySelector <em>(stringOrOptions)</em></h3>\n<p>This is a shortcut for document.querySelector.</p>\n<h4 id=\"returns-supernode-a-node-that-satisfies-the-given-patterns-evaluates-to-null-if-awaited-and-not-present\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-supernode-a-node-that-satisfies-the-given-patterns-evaluates-to-null-if-awaited-and-not-present\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/awaited-dom/super-node\"><code>SuperNode</code></a>. A Node that satisfies the given patterns. Evaluates to null if awaited and not present.</h4>\n<h3 id=\"query-selector-all\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#query-selector-all\">#</a>frameEnvironment.querySelectorAll <em>(stringOrOptions)</em></h3>\n<p>This is a shortcut for document.querySelectorAll.</p>\n<h4 id=\"returns-supernodelist-a-nodelist-that-satisfies-the-given-selector-returns-an-empty-list-if-a-resultset-is-not-found\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-supernodelist-a-nodelist-that-satisfies-the-given-selector-returns-an-empty-list-if-a-resultset-is-not-found\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/awaited-dom/super-node-list\"><code>SuperNodeList</code></a>. A NodeList that satisfies the given selector. Returns an empty list if a resultset is not found.</h4>\n<h3 id=\"xpath-selector\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#xpath-selector\">#</a>frameEnvironment.xpathSelector <em>(selector, orderedResults)</em></h3>\n<p>This is a shortcut for document.evaluate(<code>selector</code>, document, <code>FIRST_ORDERED_NODE_TYPE</code> | <code>ANY_UNORDERED_NODE_TYPE</code>)</p>\n<h4 id=\"arguments-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-6\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>selector <code>string</code>. An XPath selector that can return a single node result.</li>\n<li>orderedResults <code>boolean</code>. Optional boolean to indicate if results should return first ordered result. Default is false.</li>\n</ul>\n<h4 id=\"returns-supernode-a-node-that-satisfies-the-given-patterns-evaluates-to-null-if-awaited-and-not-present-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-supernode-a-node-that-satisfies-the-given-patterns-evaluates-to-null-if-awaited-and-not-present-1\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/awaited-dom/super-node\"><code>SuperNode</code></a>. A Node that satisfies the given patterns. Evaluates to null if awaited and not present.</h4>\n<h3 id=\"xpath-selector-all\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#xpath-selector-all\">#</a>frameEnvironment.xpathSelectorAll <em>(selector, orderedResults)</em></h3>\n<p>This is a shortcut for document.evaluate(<code>selector</code>, document, <code>ORDERED_NODE_ITERATOR_TYPE</code> | <code>UNORDERED_NODE_ITERATOR_TYPE</code>).</p>\n<p>NOTE: this API will iterate through the results to return an array of all matching nodes.</p>\n<h4 id=\"arguments-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-7\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>selector <code>string</code>. An XPath selector that can return node results.</li>\n<li>orderedResults <code>boolean</code>. Optional boolean to indicate if results should return first ordered result. Default is false.</li>\n</ul>\n<h4 id=\"returns-promisearraysupernode-a-promise-resolving-to-an-array-of-nodes-that-satisfies-the-given-pattern\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisearraysupernode-a-promise-resolving-to-an-array-of-nodes-that-satisfies-the-given-pattern\">#</a><strong>Returns</strong>: Promise&#x3C;Array&#x3C;<a href=\"/docs/hero/awaited-dom/super-node\"><code>SuperNode</code></a>>>. A promise resolving to an array of nodes that satisfies the given pattern.</h4>\n<h3 id=\"wait-for-painting-stable\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wait-for-painting-stable\">#</a>frameEnvironment.waitForPaintingStable <em>(options)</em></h3>\n<p>Wait for the page to be loaded such that a user can see the main content above the fold, including on javascript-rendered pages (eg, Single Page Apps). This load event works around deficiencies in using the Document \"load\" event, which does not always trigger, and doesn't work for Single Page Apps.</p>\n<p>NOTE: this method should NOT be called in a Frame Document that has no visible elements.</p>\n<h4 id=\"arguments-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-8\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>options <code>object</code> Optional\n<ul>\n<li>timeoutMs <code>number</code>. Timeout in milliseconds. Default <code>30,000</code>.</li>\n<li>sinceCommandId <code>number</code>. A <code>commandId</code> from which to look for load status changes.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promisevoid\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisevoid\">#</a><strong>Returns</strong>: <code>Promise&#x3C;void></code></h4>\n<h3 id=\"wait-for-element\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wait-for-element\">#</a>frameEnvironment.waitForElement <em>(element,options)</em></h3>\n<p>Wait until a specific element is present in the dom.</p>\n<h4 id=\"arguments-9\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-9\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>element <a href=\"/docs/hero/awaited-dom/super-element\"><code>SuperElement</code></a></li>\n<li>options <code>object</code> Accepts any of the following:\n<ul>\n<li>timeoutMs <code>number</code>. Timeout in milliseconds. Default <code>30,000</code>.</li>\n<li>waitForVisible <code>boolean</code>. Wait until this element is visible to a user (see <a href=\"#get-computed-visibility\">getComputedVisibility</a>.</li>\n<li>waitForHidden <code>boolean</code>. Wait until this element is hidden to a user (see <a href=\"#get-computed-visibility\">getComputedVisibility</a>.</li>\n<li>waitForClickable <code>boolean</code>. Wait until this element is visible to a user, int the viewport, and unobstructed (see <a href=\"#get-computed-visibility\">getComputedVisibility</a>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promise\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promise\">#</a><strong>Returns</strong>: <code>Promise</code></h4>\n<p>If at the moment of calling this method, the selector already exists, the method will return immediately.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const { activeTab, document } = hero;\n\nconst elem = document.querySelector('a.visible');\nawait activeFrame.waitForElement(elem, {\n  waitForVisible: true,\n});\n</code></pre>\n<h3 id=\"wait-for-load\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wait-for-load\">#</a>frameEnvironment.waitForLoad <em>(status, options)</em></h3>\n<p>Wait for the load status to occur on a page.</p>\n<h4 id=\"arguments-10\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-10\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>status <code>NavigationRequested | HttpRequested | HttpResponsed | HttpRedirected | DomContentLoaded | PaintingStable</code> The load status event to wait for.</li>\n<li>options <code>object</code>\n<ul>\n<li>timeoutMs <code>number</code>. Timeout in milliseconds. Default <code>30,000</code>.</li>\n<li>sinceCommandId <code>number</code>. A <code>commandId</code> from which to look for status changed.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promisevoid-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisevoid-1\">#</a><strong>Returns</strong>: <code>Promise&#x3C;void></code></h4>\n<p>The following are possible statuses and their meanings:</p>\n<div class=\"show-table-header show-bottom-border minimal-row-height\"></div>\n<table>\n<thead>\n<tr>\n<th>Status</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>NavigationRequested</code></td>\n<td>A navigation request is initiated by the page or user</td>\n</tr>\n<tr>\n<td><code>HttpRequested</code></td>\n<td>The http request for the document has been initiated</td>\n</tr>\n<tr>\n<td><code>HttpResponded</code></td>\n<td>The http response has been retrieved</td>\n</tr>\n<tr>\n<td><code>HttpRedirected</code></td>\n<td>The original http request was redirected</td>\n</tr>\n<tr>\n<td><code>DomContentLoaded</code></td>\n<td>The dom content has been received and loaded into the document</td>\n</tr>\n<tr>\n<td><code>AllContentLoaded</code></td>\n<td>The page load event has triggered. NOTE: this does not ALWAYS trigger in browser.</td>\n</tr>\n<tr>\n<td><code>PaintingStable</code></td>\n<td>The page has loaded the main content above the fold. Works on javascript-rendered pages.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"wait-for-location\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wait-for-location\">#</a>frameEnvironment.waitForLocation <em>(trigger, options)</em></h3>\n<p>Waits for a navigational change to document.location either because of a <code>reload</code> event or changes to the URL.</p>\n<h4 id=\"arguments-11\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-11\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>trigger <code>change | reload</code> The same url has been reloaded, or it's a new url.</li>\n<li>options <code>object</code>\n<ul>\n<li>timeoutMs <code>number</code>. Timeout in milliseconds. Default <code>30,000</code>.</li>\n<li>sinceCommandId <code>number</code>. A <code>commandId</code> from which to look for changes.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promiseresource-the-resource-representing-this-location-change-or-reload\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseresource-the-resource-representing-this-location-change-or-reload\">#</a><strong>Returns</strong>: <a href=\"/docs/hero/advanced-client/resource\"><code>Promise&#x3C;Resource></code></a> The resource representing this location change or reload.</h4>\n<p>Location changes are triggered in one of two ways:</p>\n<div class=\"show-table-header show-bottom-border minimal-row-height\"></div>\n<table>\n<thead>\n<tr>\n<th>Trigger</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>change</code></td>\n<td>A navigational change to document.location has been triggered.</td>\n</tr>\n<tr>\n<td><code>reload</code></td>\n<td>A reload of the current document.location has been triggered.</td>\n</tr>\n</tbody>\n</table>\n<p>The following example waits for a new page to load after clicking on an anchor tag:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">await hero.goto('http://example.com');\n\nconst mainFrame = hero.activeTab.mainFrameEnvironment;\nawait mainFrame.querySelector('a').$click();\nawait mainFrame.waitForLocation('change');\n\nconst newUrl = await mainFrame.url;\n</code></pre>",
  "title": "FrameEnvironment",
  "subtitles": [
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.children",
      "anchor": "#child-frames"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.cookieStorage",
      "anchor": "#cookie-storage"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.document <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#document"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.frameId",
      "anchor": "#frameid"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.isAllContentLoaded",
      "anchor": "#is-all-content-loaded"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.isDomContentLoaded",
      "anchor": "#is-dom-content-loaded"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.isPaintingStable",
      "anchor": "#is-painting-stable"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.lastCommandId",
      "anchor": "#lastCommandId"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.localStorage <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#local-storage"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.parentFrameId",
      "anchor": "#parent-frameid"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.name",
      "anchor": "#name"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.sessionStorage <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#session-storage"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.url",
      "anchor": "#url"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.Request <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#request-type"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.fetch <em>(requestInput, requestInit)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#fetch"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.getFrameEnvironment <em>(frameElement)</em>",
      "anchor": "#get-frame-environment"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.getComputedStyle <em>(element, pseudoElement)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#computed-style"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.getComputedVisibility <em>(element</em>",
      "anchor": "#get-computed-visibility"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.getJsValue <em>(path)</em>",
      "anchor": "#get-js-value"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.isElementVisible <em>(element)</em>",
      "anchor": "#is-element-visible"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.querySelector <em>(stringOrOptions)</em>",
      "anchor": "#query-selector"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.querySelectorAll <em>(stringOrOptions)</em>",
      "anchor": "#query-selector-all"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.xpathSelector <em>(selector, orderedResults)</em>",
      "anchor": "#xpath-selector"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.xpathSelectorAll <em>(selector, orderedResults)</em>",
      "anchor": "#xpath-selector-all"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.waitForPaintingStable <em>(options)</em>",
      "anchor": "#wait-for-painting-stable"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.waitForElement <em>(element,options)</em>",
      "anchor": "#wait-for-element"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.waitForLoad <em>(status, options)</em>",
      "anchor": "#wait-for-load"
    },
    {
      "depth": 3,
      "value": "frameEnvironment.waitForLocation <em>(trigger, options)</em>",
      "anchor": "#wait-for-location"
    }
  ]
}