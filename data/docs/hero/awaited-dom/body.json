{
  "content": "<h1 id=\"awaiteddom--body\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#awaiteddom--body\">#</a><a href=\"/docs/hero/basic-client/awaited-dom\">AwaitedDOM</a> <span>/</span> Body</h1>\n<div class='overview'><span class=\"seoSummary\">The <strong><code>Body</code></strong> mixin of the Fetch API represents the body of the response/request, allowing you to declare what its content type is and how it should be handled.</span></div>\n<div class='overview'><code>Body</code> is implemented by both <code>Request</code> and <code>Response</code>. This provides these objects with an associated <dfn>body</dfn> (a stream), a <dfn>used flag</dfn> (initially unset), and a <dfn>MIME type</dfn> (initially the empty byte sequence).</div>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"bodyUsed\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#bodyUsed\">#</a>.bodyUsed <div class=\"specs\"><i>W3C</i></div></h3>\n<p>A <code>boolean</code> that indicates whether the body has been read.</p>\n<h4 id=\"type-promiseboolean\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promiseboolean\">#</a><strong>Type</strong>: <code>Promise&#x3C;boolean></code></h4>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"arrayBuffer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arrayBuffer\">#</a>.arrayBuffer <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Takes a <code>Response</code> stream and reads it to completion. It returns a promise that resolves with an <code>ArrayBuffer</code>.</p>\n<h4 id=\"returns-promisearraybuffer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisearraybuffer\">#</a><strong>Returns</strong>: <code>Promise&#x3C;ArrayBuffer></code></h4>\n<h3 id=\"json\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#json\">#</a>.json <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Takes a <code>Response</code> stream and reads it to completion. It returns a promise that resolves with the result of parsing the body text as <code>JSON</code>.</p>\n<h4 id=\"returns-promiseany\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseany\">#</a><strong>Returns</strong>: <code>Promise&#x3C;any></code></h4>\n<h3 id=\"text\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#text\">#</a>.text <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Takes a <code>Response</code> stream and reads it to completion. It returns a promise that resolves with a <code>string</code> (text). The response is <em>always</em> decoded using UTF-8.</p>\n<h4 id=\"returns-promisestring\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisestring\">#</a><strong>Returns</strong>: <code>Promise&#x3C;string></code></h4>\n<h2 id=\"unimplemented-specs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#unimplemented-specs\">#</a>Unimplemented Specs</h2>\n<h4 id=\"properties-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties-1\">#</a>Properties</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>body</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"methods-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods-1\">#</a>Methods</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>blob()</code></td>\n<td><code>formData()</code></td>\n</tr>\n</tbody>\n</table>",
  "title": " <span>/</span> Body",
  "subtitles": [
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": ".bodyUsed <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#bodyUsed"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": ".arrayBuffer <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#arrayBuffer"
    },
    {
      "depth": 3,
      "value": ".json <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#json"
    },
    {
      "depth": 3,
      "value": ".text <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#text"
    },
    {
      "depth": 2,
      "value": "Unimplemented Specs",
      "anchor": "#unimplemented-specs"
    }
  ]
}