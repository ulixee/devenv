{
  "content": "<h1 id=\"awaiteddom--file\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#awaiteddom--file\">#</a><a href=\"/docs/hero/basic-client/awaited-dom\">AwaitedDOM</a> <span>/</span> File</h1>\n<div class='overview'>The <strong><code>File</code></strong> interface provides information about files and allows JavaScript in a web page to access their content.</div>\n<div class='overview'><code>File</code> objects are generally retrieved from a <code>FileList</code> object returned as a result of a user selecting files using the&nbsp;<code>&lt;input&gt;</code>&nbsp;element, from a drag and drop operation's <code>DataTransfer</code> object, or from the&nbsp;<code>mozGetAsFile()</code>&nbsp;API on an&nbsp;<code>HTMLCanvasElement</code>.</div>\n<div class='overview'>A <code>File</code> object is a specific kind of a <code>Blob</code>, and can be used in any context that a Blob can. In particular, <code>FileReader</code>, <code>URL.createObjectURL()</code>, <code>createImageBitmap()</code>, and <code>XMLHttpRequest.send()</code> accept both <code>Blob</code>s and <code>File</code>s.</div>\n<div class='overview'>See Using files from web applications for more information and examples.</div>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"lastModified\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lastModified\">#</a>.lastModified <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</p>\n<h4 id=\"type-promisenumber\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisenumber\">#</a><strong>Type</strong>: <code>Promise&#x3C;number></code></h4>\n<h3 id=\"name\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#name\">#</a>.name <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns the name of the file referenced by the <code>File</code> object.</p>\n<h4 id=\"type-promisestring\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisestring\">#</a><strong>Type</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"size\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#size\">#</a>.size <div class=\"specs\"><i>W3C</i></div></h3>\n<p>The size, in bytes, of the data contained in the <code>Blob</code> object.</p>\n<h4 id=\"type-promisenumber-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisenumber-1\">#</a><strong>Type</strong>: <code>Promise&#x3C;number></code></h4>\n<h3 id=\"type\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type\">#</a>.type <div class=\"specs\"><i>W3C</i></div></h3>\n<p>A string indicating the MIMEÂ type of the data contained in the <code>Blob</code>. If the type is unknown, this string is empty.</p>\n<h4 id=\"type-promisestring-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisestring-1\">#</a><strong>Type</strong>: <code>Promise&#x3C;string></code></h4>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"arrayBuffer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arrayBuffer\">#</a>.arrayBuffer <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a promise that resolves with an <code>ArrayBuffer</code> containing the entire contents of the <code>Blob</code> as binary data.</p>\n<h4 id=\"returns-promisearraybuffer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisearraybuffer\">#</a><strong>Returns</strong>: <code>Promise&#x3C;ArrayBuffer></code></h4>\n<h3 id=\"slice\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#slice\">#</a>.slice <em>(start?, end?, contentType?)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a new <code>Blob</code> object containing the data in the specified range of bytes of the blob on which it's called.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>start <code>number</code>. An index into the <code>Blob</code> indicating the first byte to include in the new <code>Blob</code>. If you specify a negative value, it's treated as an offset from the end of the <code>Blob</code> toward the beginning. For example, -10 would be the 10th from last byte in the <code>Blob</code>. The default value is 0. If you specify a value for <code>start</code> that is larger than the size of the source <code>Blob</code>, the returned <code>Blob</code> has size 0 and contains no data.</li>\n<li>end <code>number</code>. An index into the <code>Blob</code> indicating the first byte that will <em>not</em> be included in the new <code>Blob</code> (i.e. the byte exactly at this index is not included). If you specify a negative value, it's treated as an offset from the end of the <code>Blob</code> toward the beginning. For example, -10 would be the 10th from last byte in the <code>Blob</code>. The default value is <code>size</code>.</li>\n<li>contentType <code>string</code>. The content type to assign to the new <code>Blob</code>; this will be the value of its <code>type</code> property. The default value is an empty string.</li>\n</ul>\n<h4 id=\"returns-promiseblob\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseblob\">#</a><strong>Returns</strong>: <code>Promise&#x3C;Blob></code></h4>\n<h3 id=\"text\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#text\">#</a>.text <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns a promise that resolves with a <code>string</code> containing the entire contents of the <code>Blob</code> interpreted as UTF-8 text.</p>\n<h4 id=\"returns-promisestring\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisestring\">#</a><strong>Returns</strong>: <code>Promise&#x3C;string></code></h4>\n<h2 id=\"unimplemented-specs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#unimplemented-specs\">#</a>Unimplemented Specs</h2>\n<h4 id=\"methods-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods-1\">#</a>Methods</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>stream()</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>",
  "title": " <span>/</span> File",
  "subtitles": [
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": ".lastModified <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#lastModified"
    },
    {
      "depth": 3,
      "value": ".name <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#name"
    },
    {
      "depth": 3,
      "value": ".size <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#size"
    },
    {
      "depth": 3,
      "value": ".type <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#type"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": ".arrayBuffer <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#arrayBuffer"
    },
    {
      "depth": 3,
      "value": ".slice <em>(start?, end?, contentType?)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#slice"
    },
    {
      "depth": 3,
      "value": ".text <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#text"
    },
    {
      "depth": 2,
      "value": "Unimplemented Specs",
      "anchor": "#unimplemented-specs"
    }
  ]
}