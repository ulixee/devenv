{
  "content": "<h1 id=\"basic-concepts\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#basic-concepts\">#</a>Basic Concepts</h1>\n<h2 id=\"startingstoppingdeploying\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#startingstoppingdeploying\">#</a>Starting/Stopping/Deploying</h2>\n<p>Datastores must be started to use them. You start them by running @ulixee/datastore start <path>, which runs it on a local Cloud server (that you must start on your own, or via Ulixee Desktop).</p>\n<p>Once you start a Datastore, you can query it locally using the <a href=\"https://ulixee.org/docs/client\">@ulixee/client</a> pointed at the Datastore's url. A started Datastore's state will be erased when it stops. To create a longterm storage of data, you deploy a Datastore to a cloud.</p>\n<h2 id=\"contained-units\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#contained-units\">#</a>Contained Units</h2>\n<p>Datastore Extractors contain all their core logic in a single unit. This unit can be run once or many times, both in a single process and across many processes. The callback function is able to be re-used, but a Datastore can also be run directly as a node script.</p>\n<h2 id=\"input--output-creates-compose-ability\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#input--output-creates-compose-ability\">#</a>Input / Output Creates Compose-ability</h2>\n<p>When you write a scraper script, you often need to run the same logic across a series of pages. Sometimes you know them ahead of time, and sometimes you spawn new tasks based on the data found in the current task.</p>\n<p>Datastore extractors and cralwers are expected to use input to drive these dynamic starting points. They're also expected to return the same data format consistently.</p>\n<p>When you combine these two ideas, it means your \"Scraper scripts\" can become simple functions that provide parameters and expect a result in a certain format. And it makes them infinitely composable.</p>\n<h2 id=\"deployable\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#deployable\">#</a>Deployable</h2>\n<p>Datastores can be packaged up and deployed as a \"unit\" to a Ulixee CloudNode. You can query using the <a href=\"https://ulixee.org/docs/client\">Ulixee Client</a> library. By deploying to a CloudNode, Datastores are able to run very efficiently - the code is cached, all individual commands for the Datastore Extractors are run on the CloudNode and do not need serialization/transport to a Client. The only necessary communications are an \"input\" and the resulting \"output\" as a response.</p>",
  "title": "Basic Concepts",
  "subtitles": [
    {
      "depth": 2,
      "value": "Starting/Stopping/Deploying",
      "anchor": "#startingstoppingdeploying"
    },
    {
      "depth": 2,
      "value": "Contained Units",
      "anchor": "#contained-units"
    },
    {
      "depth": 2,
      "value": "Input / Output Creates Compose-ability",
      "anchor": "#input--output-creates-compose-ability"
    },
    {
      "depth": 2,
      "value": "Deployable",
      "anchor": "#deployable"
    }
  ]
}