{
  "content": "<h1 id=\"configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#configuration\">#</a>Configuration</h1>\n<p>Configuration variables can be defined at a few levels:</p>\n<ul>\n<li><code>Hero</code> At an instance level, configured via <a href=\"/docs/hero/basic-client/hero#constructor\">new Hero()</a>.</li>\n<li><code>Connection</code> At a connection level, which can be configured when creating a new <a href=\"/docs/hero/advanced-client/connection-to-core#configuration\">ConnectionToCore</a>.</li>\n<li><code>Core</code> At an internal level, using the <code>@ulixee/hero-core</code> module of Hero. This must be run in the environment where your Browser Engine(s) and <code>@ulixee/hero-core</code> module are running. If you're running remote, this will be your server.</li>\n</ul>\n<p>The internal <code>@ulixee/hero-core</code> module can receive several configuration options on <a href=\"#core-start.md\">start</a>, or when a new <a href=\"/docs/hero/advanced-client/connection-to-core\">connection</a> is established.</p>\n<h3 id=\"connection-to-core-hero\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#connection-to-core-hero\">#</a>Connection To Core <div class=\"specs\"><i>Hero</i></div></h3>\n<p>The <a href=\"/docs/hero/advanced-client/connection-to-core\">ConnectionToCore</a> to be used by one or more <a href=\"/docs/hero/basic-client/hero\">Hero</a> instances.</p>\n<p>All <a href=\"/docs/hero/advanced-client/connection-to-core#configurations\">configurations</a> accept both an <code>options</code> object and a <a href=\"/docs/hero/advanced-client/connection-to-core\"><code>ConnectionToCore</code></a> instance.</p>\n<h3 id=\"max-concurrent-heroes-count-core\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#max-concurrent-heroes-count-core\">#</a>Max Concurrent Heroes Count <div class=\"specs\"><i>Core</i></div></h3>\n<p>Limit concurrent Heroes operating at any given time across all <a href=\"/docs/hero/advanced-client/connection-to-core\">connections</a> to a \"Core\". Defaults to <code>10</code>.</p>\n<p>Configurable via <a href=\"#core-start.md\"><code>Core.start()</code></a> or <a href=\"/docs/hero/advanced-client/connection-to-core#configuration\"><code>ConnectionToCore</code></a>.</p>\n<h3 id=\"data-dir\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#data-dir\">#</a>Data Dir <div class=\"specs\"><i>Connection</i><i>Core</i></div></h3>\n<p>Configures the storage location for files created by Core.</p>\n<ul>\n<li>Session Databases</li>\n<li>Man-in-the-middle network certificates</li>\n</ul>\n<p><code>Environmental variable</code>: <code>ULX_DATA_DIR=/your-absolute-dir-path</code></p>\n<p>Configurable via <a href=\"#core-start.md\"><code>Core.start()</code></a> or the first <a href=\"/docs/hero/advanced-client/connection-to-core\"><code>ConnectionToCore</code></a>.</p>\n<h3 id=\"blocked-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#blocked-resources\">#</a>Blocked Resource Types <div class=\"specs\"><i>Connection</i><i>Hero</i></div></h3>\n<p>One of the best ways to optimize Hero's memory and CPU is setting <code>blockedResourceTypes</code> to block resources you don't need. The following are valid options.</p>\n<p class=\"show-table-header show-bottom-border minimal-row-height\"></p>\n<table>\n<thead>\n<tr>\n<th>Options</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>JsRuntime</code></td>\n<td>Executes JS in webpage. Requires <code>AwaitedDOM</code>.</td>\n</tr>\n<tr>\n<td><code>BlockJsAssets</code></td>\n<td>Blocks all referenced script assets.</td>\n</tr>\n<tr>\n<td><code>BlockCssAssets</code></td>\n<td>Blocks all referenced CSS assets.</td>\n</tr>\n<tr>\n<td><code>BlockImages</code></td>\n<td>Blocks all referenced images on page.</td>\n</tr>\n<tr>\n<td><code>BlockFonts</code></td>\n<td>Blocks all referenced fonts on page.</td>\n</tr>\n<tr>\n<td><code>BlockIcons</code></td>\n<td>Blocks all referenced icons on page.</td>\n</tr>\n<tr>\n<td><code>BlockMedia</code></td>\n<td>Blocks all referenced media on page.</td>\n</tr>\n<tr>\n<td><code>BlockAssets</code></td>\n<td>Shortcut for <code>BlockJsAssets</code>, <code>BlockCssAssets</code> and <code>BlockImages</code>.</td>\n</tr>\n<tr>\n<td><code>All</code></td>\n<td>Blocks all of the resources above. Only retrieves window.response.</td>\n</tr>\n<tr>\n<td><code>None</code></td>\n<td>No assets are blocked. <code>default</code></td>\n</tr>\n</tbody>\n</table>\n<p>As you'll notice above, some features are dependent on others and therefore automatically enable other features.</p>\n<p>Setting an empty array is the same as setting to <code>None</code>.</p>\n<h3 id=\"blocked-urls\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#blocked-urls\">#</a>Blocked Urls<div class=\"specs\"><i>Connection</i><i>Hero</i></div></h3>\n<p>Similar to <a href=\"#blocked-resources\"><code>Blocked Resource Types</code></a>, this allows you to block resources\nfrom being loaded. Instead of focusing on the type of resource we are focussing on the url instead.</p>\n<p>Wild cards can be used as well.</p>\n<p>Examples:</p>\n<pre class=\"ulixeeTheme\"><code>http://example.com\nexample.com\n*.example.com\n*example.com\n</code></pre>\n<h3 id=\"intercepted-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#intercepted-resources\">#</a>Intercepted Resources</h3>\n<p>This allows you to intercept resources and modify them before they are loaded. This is useful for modifying the response of a request.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const hero = new Hero({\n  interceptedResources: [\n    {\n      url: 'https://example.com',\n      body: '&#x3C;div>Hello World!&#x3C;/div>',\n    },\n  ],\n});\n\nconst heroStatus = new Hero({\n  interceptedResources: [\n    {\n      url: 'https://example.com',\n      statusCode: 404,\n    },\n  ],\n});\n\nconst heroHeaders = new Hero({\n  interceptedResources: [\n    {\n      url: 'https://example.com',\n      headers: [\n        {\n          name: 'Content-Type',\n          value: 'text/html',\n        },\n      ],\n    },\n  ],\n});\n</code></pre>\n<h3 id=\"user-profile-connectionhero\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#user-profile-connectionhero\">#</a>User Profile <div class=\"specs\"><i>Connection</i><i>Hero</i></div></h3>\n<p>A user profile stores and restores Cookies, DOM Storage and IndexedDB records for an Hero. NOTE: the serialized user profile passed into an Hero instance is never modified. If you want to update a profile with changes, you should re-export and save it to the format you're persisting to.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const rawProfileJson = fs.readFileSync('profile.json', 'utf-8');\nconst profile = JSON.parse(rawProfileJson); // { cookies: { sessionId: 'test' }}\n\nconst hero = new Hero({ userProfile: profile });\nconst latestUserProfile = await hero.exportUserProfile();\n// { cookies, localStorage, sessionStorage, indexedDBs }\n\nawait hero.goto('http://example.com');\n\nconst latestUserProfile = await hero.exportUserProfile();\n\nfs.writeFileSync('profile.json', JSON.stringify(latestUserProfile, null, 2));\n</code></pre>\n<h3 id=\"upstream-proxy-url-hero\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#upstream-proxy-url-hero\">#</a>Upstream Proxy Url <div class=\"specs\"><i>Hero</i></div></h3>\n<p>Configures a proxy url to route traffic through for a given Hero. This function supports two types of proxies:</p>\n<ul>\n<li><code>Socks5</code> - many VPN providers allow you to use a socks5 configuration to send traffic through one of their VPNs behind the scenes. You can pass any required username and password through the <code>UserInfo</code> portion of the url, e.g., <code>socks5://username:password@sockshost.com:1080</code>.</li>\n<li><code>Http</code> - an http proxy will create secure TLS socket to an upstream server using the HTTP connect verb. Services like <a href=\"https://luminati.io\">luminati</a> provide highly configurable Http proxies that can route traffic from various geographic locations and \"grade\" of IP - ie, consumer IP vs datacenter.</li>\n</ul>\n<p>An upstream proxy url should be a fully formatted url to the proxy. If your proxy is socks5, start it with <code>socks5://</code>, http <code>http://</code> or <code>https://</code> as needed. An upstream proxy url can optionally include the user authentication parameters in the url. It will be parsed out and used as the authentication.</p>\n<h2 id=\"core-configuration\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#core-configuration\">#</a>Core Configuration</h2>\n<p>Configuration for Core should be performed before initialization.</p>\n<h3 id=\"core-start\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#core-start\">#</a>Core.start <em>(options)</em></h3>\n<p>Update existing settings.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>options <code>object</code> Accepts any of the following:\n<ul>\n<li>maxConcurrentClientCount <code>number</code> defaults to <code>10</code>. Limit concurrent Hero sessions running at any given time.</li>\n<li>dataDir <code>string</code> defaults to <code>os.tmpdir()/.ulixee</code>. Directory to store session databases and mitm certificates.</li>\n<li>defaultUnblockedPlugins <code>IAgentPluginClass[]</code>. A list of <a href=\"https://github.com/ulixee/unblocked/tree/main/specification\">Unblocked Plugin</a> classes to be installed by default in new Agents.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"returns-promise\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promise\">#</a><strong>Returns</strong>: <code>Promise</code></h4>",
  "title": "Configuration",
  "subtitles": [
    {
      "depth": 3,
      "value": "Connection To Core <div class=\"specs\"><i>Hero</i></div>",
      "anchor": "#connection-to-core-hero"
    },
    {
      "depth": 3,
      "value": "Max Concurrent Heroes Count <div class=\"specs\"><i>Core</i></div>",
      "anchor": "#max-concurrent-heroes-count-core"
    },
    {
      "depth": 3,
      "value": "Data Dir <div class=\"specs\"><i>Connection</i><i>Core</i></div>",
      "anchor": "#data-dir"
    },
    {
      "depth": 3,
      "value": "Blocked Resource Types <div class=\"specs\"><i>Connection</i><i>Hero</i></div>",
      "anchor": "#blocked-resources"
    },
    {
      "depth": 3,
      "value": "Blocked Urls<div class=\"specs\"><i>Connection</i><i>Hero</i></div>",
      "anchor": "#blocked-urls"
    },
    {
      "depth": 3,
      "value": "Intercepted Resources",
      "anchor": "#intercepted-resources"
    },
    {
      "depth": 3,
      "value": "User Profile <div class=\"specs\"><i>Connection</i><i>Hero</i></div>",
      "anchor": "#user-profile-connectionhero"
    },
    {
      "depth": 3,
      "value": "Upstream Proxy Url <div class=\"specs\"><i>Hero</i></div>",
      "anchor": "#upstream-proxy-url-hero"
    },
    {
      "depth": 2,
      "value": "Core Configuration",
      "anchor": "#core-configuration"
    },
    {
      "depth": 3,
      "value": "Core.start <em>(options)</em>",
      "anchor": "#core-start"
    }
  ]
}