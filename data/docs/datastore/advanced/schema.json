{
  "content": "<h1 id=\"schema\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#schema\">#</a>Schema</h1>\n<blockquote>\n<p>The Schema module provides a combination of Typescript typing, Documentation, and Runtime validation for types.</p>\n</blockquote>\n<p>Schemas are generally created via the exported methods from the <code>@ulixee/schema</code> module.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { object, boolean, string, number } from '@ulixee/schema';\n\nconst record = object({\n  isValid: boolean({ description: 'Whether this record can be correctly serialized' }),\n  valueInEnglish: string(),\n  countOfChars: number({ integer: true }),\n});\n\nconst result = record.validate({\n  isValid: true,\n  valueInEnglish: 1n,\n  countOfChars: 0,\n});\n\nresult.success; // false\nresult.errors; // ValidationError list\n</code></pre>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"boolean\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#boolean\">#</a>boolean(config): <code>BooleanSchema</code></h3>\n<p>Creates a runtime <code>boolean</code> schema. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"number\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#number\">#</a>number(config): <code>NumberSchema</code></h3>\n<p>Creates a runtime <code>number</code> schema. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>. Numbers can be any integer, decimal or float fitting into a NodeJs number type.</p>\n<h4 id=\"arguments-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-1\">#</a><strong>Arguments</strong>:</h4>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>min: <code>number</code>. Minimum value this field allows.</li>\n<li>max: <code>number</code>. Maximum value this field allows.</li>\n<li>decimals: <code>number</code>. Optional number of decimal points this number will contain.</li>\n<li>integer: <code>boolean</code>. True if this schema constrained to whole numbers.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"string\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#string\">#</a>string(config): <code>StringSchema</code></h3>\n<p>Creates a runtime <code>string</code> schema. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>.</p>\n<h4 id=\"arguments-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-2\">#</a><strong>Arguments</strong>:</h4>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>format: <code>string of 'email' | 'url' | 'date' | 'time'</code>. An optional format for values to adhere to.\n<ul>\n<li>email and url follow W3C specifications.</li>\n<li>date is 'YYYY-MM-DD' format (Year-Month-Day)</li>\n<li>time is 'HH:mm' format (24 Hour-Minute)</li>\n</ul>\n</li>\n<li>regexp: <code>RegExp</code>. Optional regular expression defining a custom pattern.</li>\n<li>enum: <code>string[]</code>. Optional list of allowed string values.</li>\n<li>minLength: <code>number</code>. Optional minimum length this string can be.</li>\n<li>maxLength: <code>number</code>. Optional maximum length this string can be.</li>\n<li>length: <code>number</code>. Optional required length of the string.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"bigint\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#bigint\">#</a>bigint(config): <code>BigintSchema</code></h3>\n<p>Creates a runtime <code>bigint</code> schema. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>.</p>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>min: <code>bigint</code>. Minimum value this field allows.</li>\n<li>max: <code>bigint</code>. Maximum value this field allows.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"buffer\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#buffer\">#</a>buffer(config): <code>BufferSchema</code></h3>\n<p>Creates a runtime <code>Buffer</code> schema. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>.</p>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>encoding: <code>string</code>. Optional encoding this buffer will be encoded with. One of <code>ascii, utf8 utf16le, ucs2, base64, latin1, binary, hex</code></li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"date\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#date\">#</a>date(config): <code>DateSchema</code></h3>\n<p>Creates a runtime <code>Date</code> schema, validating this object is a Date. NOTE: you almost always add this as a key of an <a href=\"#object\"><code>ObjectSchema</code></a>.</p>\n<p>Arguments is an optional object containing the following properties:</p>\n<ul>\n<li>future: <code>boolean</code>. Optional boolean indicating if this value will be in the future at time of run.</li>\n<li>past: <code>boolean</code>. Optional boolean indicating if this value will be in the past at time of run.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<h3 id=\"record\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#record\">#</a>record(config): <code>RecordSchema</code></h3>\n<p>Creates a runtime <code>Record</code> schema of unrestricted string keys mapped to a type of Schema value. You must provide the Schema type of the record values.</p>\n<p>Arguments is an object containing the following properties:</p>\n<ul>\n<li>values: <code>Any Schema</code>. A required definition for the values of this schema</li>\n<li>keys: <code>StringSchema</code>. Optional StringSchema defining the key restrictions for this record.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { record, string, number } from '@ulixee/schema';\n\nconst schema = record({\n  keys: string({ length: 10 }),\n  values: number({ description: 'Every key is a number' }),\n});\n\nschema.validate({\n  '0123456789': 1,\n  '1234567890': 2,\n  '2345678901': 3,\n}); // VALID!\n</code></pre>\n<h3 id=\"object\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#object\">#</a>object(config): <code>ObjectSchema</code></h3>\n<p>Creates a runtime <code>Object</code> schema of specific keys mapped to types of values.</p>\n<p>The default argument structure for <code>object</code> takes the following properties:</p>\n<ul>\n<li>fields: <code>Record&#x3C;string, Any Schema></code>. A required object defining all keys mapped to the Schema of each accompanying value.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { object, string, number } from '@ulixee/schema';\n\nconst schema = object({\n  description: 'Documentation that will be added to jsdocs',\n  fields: {\n    field1: string(),\n    field2: number(),\n  },\n});\n\nschema.validate({\n  field1: 'test',\n  field2: 1,\n}); // VALID!\n\nschema.validate({\n  field1: 'test',\n  field2: '1',\n}); // INVALID!\n</code></pre>\n<p>If you are not providing a description or optional value, you can shorten a definition to directly supply the <code>fields</code>.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { object, string, number } from '@ulixee/schema';\n\nconst schema = object({\n  field1: string(),\n  field2: number(),\n});\n</code></pre>\n<h3 id=\"array\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#array\">#</a>array(config): <code>ArraySchema</code></h3>\n<p>Creates a runtime <code>Array</code> schema of any type of Schema (<a href=\"#object\">object</a>, <a href=\"#string\">string</a>, <a href=\"#number\">number</a>, etc).</p>\n<p>The default argument structure for <code>array</code> takes the following properties:</p>\n<ul>\n<li>element: <code>Any Schema</code>. The type of Schema for the array elements.</li>\n<li>optional: <code>boolean</code>. Field to set to true of the boolean is an optional field.</li>\n<li>description: <code>string</code>. Optional description of this field to add to documentation and runtime types.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { array, number } from '@ulixee/schema';\n\nconst schema = array({\n  element: number(),\n});\n\nschema.validate([1, 2, 3]); // VALID!\nschema.validate([1, 2, '3']); // INVALID!\n</code></pre>\n<p>If you are not providing a description or optional value, you can shorten a definition to directly supply the <code>element</code>.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { array, number } from '@ulixee/schema';\n\nconst schema = array(number());\n</code></pre>",
  "title": "Schema",
  "subtitles": [
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": "boolean(config): <code>BooleanSchema</code>",
      "anchor": "#boolean"
    },
    {
      "depth": 3,
      "value": "number(config): <code>NumberSchema</code>",
      "anchor": "#number"
    },
    {
      "depth": 3,
      "value": "string(config): <code>StringSchema</code>",
      "anchor": "#string"
    },
    {
      "depth": 3,
      "value": "bigint(config): <code>BigintSchema</code>",
      "anchor": "#bigint"
    },
    {
      "depth": 3,
      "value": "buffer(config): <code>BufferSchema</code>",
      "anchor": "#buffer"
    },
    {
      "depth": 3,
      "value": "date(config): <code>DateSchema</code>",
      "anchor": "#date"
    },
    {
      "depth": 3,
      "value": "record(config): <code>RecordSchema</code>",
      "anchor": "#record"
    },
    {
      "depth": 3,
      "value": "object(config): <code>ObjectSchema</code>",
      "anchor": "#object"
    },
    {
      "depth": 3,
      "value": "array(config): <code>ArraySchema</code>",
      "anchor": "#array"
    }
  ]
}