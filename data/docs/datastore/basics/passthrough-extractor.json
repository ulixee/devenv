{
  "content": "<h1 id=\"passthrough-extractor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#passthrough-extractor\">#</a>Passthrough Extractor</h1>\n<p>A PassthroughExtractor allows you to extend other Datastore Extractors published across the web. Passthrough Extractors don't have their own <code>run</code> callback - it has been delegated to the remote function. Input and Output can be manipulated before data is sent to the remote function using the <code>onRequest</code> callback, or afterwards in the <code>onResponse</code> function.</p>\n<h3 id=\"an-example\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#an-example\">#</a>An Example</h3>\n<p>The following is a simple example:</p>\n<h4 id=\"extractor-1-published-to-a-cloudnode-at-15323222558080\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extractor-1-published-to-a-cloudnode-at-15323222558080\">#</a>Extractor 1 Published to a CloudNode at <code>153.23.22.255:8080</code>:</h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore, { Extractor } from '@ulixee/datastore';\n\nexport default new Datastore({\n  id: `echo`,\n  version: '0.0.1',\n  extractors: {\n    extractor1: new Extractor({\n      run({ input, Output }) {\n        const output = new Output();\n        output.didRun = true;\n        output.echo = input.toEcho;\n      },\n    }),\n  },\n});\n</code></pre>\n<h4 id=\"extractor-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extractor-2\">#</a>Extractor 2:</h4>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore, { PassthroughExtractor } from '@ulixee/datastore';\n\nexport default new Datastore({\n  id: 'echo2',\n  version: '0.0.1',\n  // NOTE: this is not a real hosted Datastore\n  remoteDatastores: {\n    source: `ulx://153.23.22.255:8080/echo@v0.0.1`,\n  },\n  extractors: {\n    extractor2: new PassthroughExtractor({\n      remoteExtractor: `source.extractor1`,\n      async onResponse({ Output, stream }) {\n        const [record] = await stream;\n        Output.emit({ ...record, didPasshthrough: true });\n      },\n    }),\n  },\n});\n</code></pre>\n<h4 id=\"running\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#running\">#</a>Running:</h4>\n<p>Start your datastore.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npx @ulixee/datastore start ./example.js\n</code></pre>\n<p>Now you can query your Datastore with <a href=\"https://ulixee.org/docs/client\">Ulixee Client</a>.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">import Client from '@ulixee/client';\n\nconst client = new Client('ulx://localhost:1818/echo2@0.0.1');\nclient.fetch('extractor2', { toEcho: 'hi' }).then(records => {\n  console.log(records);\n});\n</code></pre>\n<p>The output will be:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-json\">{\n  \"didRun\": true,\n  \"echo\": \"hi\",\n  \"didPasshtrough\": true\n}\n</code></pre>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<h3 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>new PassthroughExtractor <em>(extractorComponents, ...plugins[])</em></h3>\n<p>Creates a new PassthroughExtractor instance.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<p>extractorComponents <code>object</code>:</p>\n<ul>\n<li>remoteExtractor <code>string</code>. Required remoteExtractor to run. This string must start with the name of the <code>remoteDatastores</code> key as defined in <a href=\"/docs/datastore/basics/datastore#remote-datastores\">Datastore.remoteDatastores</a>. Eg, <code>source.extractor1</code>, where <code>extractor1</code> is the extractor name, and <code>source</code> is a key of <code>remoteDatastores</code>.</li>\n<li>upcharge <code>number</code>. Optional microgons to add to the PassthroughExtractor pricing. Defaults to 0.</li>\n<li>onRequest <code>function</code>(context: <a href=\"/docs/datastore/basics/extractor-context\">ExtractorContext</a>): <code>Promise&#x3C;any></code>. Optional function that contains any logic you wish to perform \"before\" the <code>remote</code> Extractor is called. This allows you to modify input, or enhance information using a Hero browser (if a plugin is used).</li>\n<li>onResponse <code>function</code>(context: <a href=\"/docs/datastore/basics/extractor-context\">ExtractorContext</a>): <code>Promise&#x3C;any></code>. Optional function that contains any logic you wish to perform \"after\" the <code>remote</code> Extractor has been called. The context includes:\n<ul>\n<li>stream <code>ResultsIterable</code>. An AsyncIterable object that can resolve each Output as it is emitted, or simply await the final result.</li>\n</ul>\n</li>\n<li>schema <code>IExtractorSchema</code>. Optional <a href=\"/docs/datastore/advanced/extractor-schemas\">schema</a> defining the type-checked input and output parameters for the function. This schema can be different than the remote function if conversion or manipulation will be performed on the underlying data.</li>\n</ul>\n<p>The second argument is a list of zero or more plugins.</p>\n<ul>\n<li>plugins <code>Array&#x3C;Plugin></code>. Optional. A list of <a href=\"/docs/datastore/advanced/plugins\">plugin-compatible classes</a>.</li>\n</ul>",
  "title": "Passthrough Extractor",
  "subtitles": [
    {
      "depth": 3,
      "value": "An Example",
      "anchor": "#an-example"
    },
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 3,
      "value": "new PassthroughExtractor <em>(extractorComponents, ...plugins[])</em>",
      "anchor": "#constructor"
    }
  ]
}