{
  "content": "<h1 id=\"introduction\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#introduction\">#</a>Introduction</h1>\n<blockquote>\n<p>Hero is a free and open source headless browser that's written in NodeJs, built on top of Chrome, and designed for easy and reliable scraping.</p>\n</blockquote>\n<p>A few cool highlights about Hero:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>Built for scraping</strong> - it's the first modern headless browsers designed specifically for scraping instead of just automated testing.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>Designed for web developers</strong> - We've recreated a fully compliant DOM directly in NodeJS allowing you bypass the headaches of previous scraper tools.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>Powered by Chrome</strong> - The powerful Chrome engine sits under the hood, allowing for lightning fast rendering.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>Emulates any modern browser</strong> - Emulators make it easy to disguise your script as practically any browser.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <strong>Avoids detection along the entire stack</strong> - Don't be blocked because of TLS fingerprints in your networking stack.</li>\n</ul>\n<h2 id=\"installation\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#installation\">#</a>Installation</h2>\n<p>To get started using Hero in your project, we have a \"playground\" that allows you to run examples out of the box. It can be installed using the following commands:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/hero-playground\n</code></pre>\n<p>or</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">yarn add @ulixee/hero-playground\n</code></pre>\n<p>You can drop the \"-playground\" whenever you want and use Hero directly (the core functionality is exactly the same):</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/hero\n</code></pre>\n<p>or</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">yarn add @ulixee/hero\n</code></pre>\n<p>Just make sure your Ulixee development environment is setup and ready to go, such as making sure <a href=\"https://ulixee.org/docs/cloud\"><code>@ulixee/cloud</code></a> is installed and running:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npx @ulixee/cloud start\n</code></pre>\n<h2 id=\"usage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#usage\">#</a>Usage</h2>\n<p>Hero provides access to the W3C DOM specification without the need for Puppeteer's complicated evaluate callbacks and multi-context switching:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const Hero = require('@ulixee/hero-playground');\n\n(async () => {\n  const hero = new Hero();\n  await hero.goto('https://example.org');\n  const title = await hero.document.title;\n  const intro = await hero.document.querySelector('p').textContent;\n  await hero.close();\n})();\n</code></pre>\n<h2 id=\"contributing\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#contributing\">#</a>Contributing</h2>\n<p>See <a href=\"https://ulixee.org/how-to-contribute\">How to Contribute</a> for ways to get started.</p>\n<p>This project has a <a href=\"https://ulixee.org/code-of-conduct\">Code of Conduct</a>. By interacting with this repository, organization, or community you agree to abide by its terms.</p>\n<p>We'd love your help in making Hero a better tool. Please don't hesitate to send a pull request.</p>",
  "title": "Introduction",
  "subtitles": [
    {
      "depth": 2,
      "value": "Installation",
      "anchor": "#installation"
    },
    {
      "depth": 2,
      "value": "Usage",
      "anchor": "#usage"
    },
    {
      "depth": 2,
      "value": "Contributing",
      "anchor": "#contributing"
    }
  ]
}