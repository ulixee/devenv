{
  "content": "<h1 id=\"remote-client\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#remote-client\">#</a>Remote Client</h1>\n<p>This is the default use-case for using Ulixee Client. You supply a connection URI or Object to the datastore you want to query.</p>\n<p>You can also initialize clients with a local Datastore, Table, Extractor or Crawler instance, however, these clients provide a more limited set of properties and methods than what is shown on this page. See <a href=\"/docs/client/interface/local-client\">Local Client</a>.</p>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<h3 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>new Client <em>(uriOrObject)</em></h3>\n<p>Creates a new Client instance.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>uri <code>string</code> | <code>Object</code>. A connection string in the format of <code>ulx://USERNAME:PASSWORD@HOST:PORT/DB</code>. You can also supply\nan object with the following properties:\n<ul>\n<li>username <code>string</code></li>\n<li>password <code>string</code></li>\n<li>host <code>string</code></li>\n<li>port <code>number</code></li>\n<li>database <code>string</code></li>\n</ul>\n</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Client from '@ulixee/client-playground';\n\nconst client = new Client({\n  username: 'test',\n  password: 'test',\n  host: 'localhost',\n  port: 1818,\n  database: 'test',\n});\n</code></pre>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"username\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#username\">#</a>client.username</h3>\n<p>The username authenticated with the remote server.</p>\n<h4 id=\"type-string\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-string\">#</a><strong>Type</strong>: <code>string</code></h4>\n<h3 id=\"password\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#password\">#</a>client.password</h3>\n<p>The password used to authenticate with the remote server.</p>\n<h4 id=\"type-string-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-string-1\">#</a><strong>Type</strong>: <code>string</code></h4>\n<h3 id=\"host\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#host\">#</a>client.host</h3>\n<p>The host of the remote server. Defaults to localhost.</p>\n<h4 id=\"type-string-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-string-2\">#</a><strong>Type</strong>: <code>string</code></h4>\n<h3 id=\"port\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#port\">#</a>client.port</h3>\n<p>The port sent of the remote server. Defaults to 1818.</p>\n<h4 id=\"type-number\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-number\">#</a><strong>Type</strong>: <code>number</code></h4>\n<h3 id=\"database\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#database\">#</a>client.database</h3>\n<p>The name of the datastore the client is connected.</p>\n<h4 id=\"type-string-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-string-3\">#</a><strong>Type</strong>: <code>string</code></h4>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"query\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#query\">#</a>client.query <em>(sql, boundValues)</em></h3>\n<p>Send a SQL query to the remote datastore. You can optionally attach bound values:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const client = new Client();\nconst records = await client.query('SELECT * FROM developers WHERE lastName=$1', ['Clark']);\n</code></pre>\n<h4 id=\"arguments-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-1\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>sql <code>string</code>. Any valid Ulixee SQL query</li>\n<li>boundValues <code>array</code>. Optional. Values you want to use in your sql query</li>\n</ul>\n<h4 id=\"returns-promiserecord\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiserecord\">#</a><strong>Returns</strong>: <code>Promise&#x3C;Record[]></code></h4>\n<h3 id=\"fetch\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#fetch\">#</a>client.fetch <em>(tableName, inputFilter)</em></h3>\n<p>Send a NoSQL query to the specified table:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const client = new Client();\nconst records = await client.fetch('developers' { lastname: 'Clark' });\n</code></pre>\n<h4 id=\"arguments-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-2\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>tableName <code>string</code>. The name of the remote table you want to query. Case sensitive.</li>\n<li>inputFilter <code>object</code>. Optional. Any column/values you want to filter on.</li>\n</ul>\n<h4 id=\"returns-promiserecord-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiserecord-1\">#</a><strong>Returns</strong>: <code>Promise&#x3C;Record[]></code></h4>\n<h3 id=\"run\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#run\">#</a>client.run <em>(extractorName, inputFilter)</em></h3>\n<p>Run one of the Datastore's extractors (what we call them Extractors):</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const client = new Client();\nconst records = await client.fetch('daysUntilWorldDomination' { probability: 5 });\n</code></pre>\n<h4 id=\"arguments-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-3\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>extractorName <code>string</code>. Any valid Ulixee SQL query. Case sensitive.</li>\n<li>inputFilter <code>object</code>. Optional. Any named arguments required or allowed by the extractor.</li>\n</ul>\n<h4 id=\"returns-promiserecord-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiserecord-2\">#</a><strong>Returns</strong>: <code>Promise&#x3C;Record[]></code></h4>\n<h3 id=\"crawl\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#crawl\">#</a>client.crawl <em>(crawlerName, inputFilter)</em></h3>\n<p>Trigger one of the Datastore's crawlers:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const client = new Client();\nconst records = await client.fetch('ulixee' { page: 'Home' });\n</code></pre>\n<h4 id=\"arguments-4\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-4\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>crawlerName <code>string</code>. The name of the crawler. Case sensitive.</li>\n<li>inputFilter <code>object</code>. Optional. A key/value object that will be passed to the crawler as input.</li>\n</ul>\n<h4 id=\"returns-promiserecord-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiserecord-3\">#</a><strong>Returns</strong>: <code>Promise&#x3C;Record[]></code></h4>",
  "title": "Remote Client",
  "subtitles": [
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 3,
      "value": "new Client <em>(uriOrObject)</em>",
      "anchor": "#constructor"
    },
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": "client.username",
      "anchor": "#username"
    },
    {
      "depth": 3,
      "value": "client.password",
      "anchor": "#password"
    },
    {
      "depth": 3,
      "value": "client.host",
      "anchor": "#host"
    },
    {
      "depth": 3,
      "value": "client.port",
      "anchor": "#port"
    },
    {
      "depth": 3,
      "value": "client.database",
      "anchor": "#database"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": "client.query <em>(sql, boundValues)</em>",
      "anchor": "#query"
    },
    {
      "depth": 3,
      "value": "client.fetch <em>(tableName, inputFilter)</em>",
      "anchor": "#fetch"
    },
    {
      "depth": 3,
      "value": "client.run <em>(extractorName, inputFilter)</em>",
      "anchor": "#run"
    },
    {
      "depth": 3,
      "value": "client.crawl <em>(crawlerName, inputFilter)</em>",
      "anchor": "#crawl"
    }
  ]
}