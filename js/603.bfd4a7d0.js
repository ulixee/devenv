"use strict";(self["webpackChunk_ulixee_website_main"]=self["webpackChunk_ulixee_website_main"]||[]).push([[603],{11692:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(70821),o={class:"Dependencies my-5"},r={class:"bg-gray-200 font-mono"};function l(e,t){return(0,a.openBlock)(),(0,a.createElementBlock)("div",o,[(0,a.createTextVNode)("\n    Dependencies:\n    "),(0,a.createElementVNode)("div",r,[(0,a.renderSlot)(e.$slots,"default")])])}var s=n(83744);const i={},c=(0,s.Z)(i,[["render",l]]),u=c},46918:(e,t,n)=>{n.r(t),n.d(t,{default:()=>b});var a=n(70821),o=function(e){return(0,a.pushScopeId)("data-v-d4e55be6"),e=e(),(0,a.popScopeId)(),e},r=o((function(){return(0,a.createElementVNode)("br",null,null,-1)})),l=o((function(){return(0,a.createElementVNode)("p",{class:"w-10/12"},"\n        Stream is a uniform library for querying and retrieving datasets across any scraper script wrapped in a Datastore. You can make a single query or large querysets in parallel. And you can pipe, transform, reduce and explode datasets from the output of one Datastore to the input of another.\n      ",-1)})),s={class:"relative h-60"},i=o((function(){return(0,a.createElementVNode)("div",{class:"OUTSIDE-CIRCLE"},null,-1)})),c=o((function(){return(0,a.createElementVNode)("div",{class:"INSIDE-CIRCLE"},null,-1)})),u=o((function(){return(0,a.createElementVNode)("section",null,[(0,a.createElementVNode)("header",null,"Script Locally, Run Remotely"),(0,a.createTextVNode)(),(0,a.createElementVNode)("p",null,"Add as many queries and Clouds, and let Stream handle managing the parallel operation.")],-1)})),d=o((function(){return(0,a.createElementVNode)("section",null,[(0,a.createElementVNode)("header",null,"Intelligent Parallelization"),(0,a.createTextVNode)(),(0,a.createElementVNode)("p",null,"Stream monitors each Cloud node’s load capacity to distribute your queries in the most efficient manner possible.")],-1)})),p=o((function(){return(0,a.createElementVNode)("section",null,[(0,a.createElementVNode)("header",null,"Advanced Stream Transformations"),(0,a.createTextVNode)(),(0,a.createElementVNode)("ul",null,[(0,a.createElementVNode)("li",null,[(0,a.createElementVNode)("title",null,"Transform (1 to 1)"),(0,a.createTextVNode)(),(0,a.createElementVNode)("p",null,"These are custom functions that attach to the output of datastores, instantly transforming their output into a different data structure. It’s especially powerful when used in combination with one of the other transformations.")]),(0,a.createTextVNode)("\n\n        Pipe (1 to 1)\n        Seamlessly connect the output of one datastore (or transform function) into the input of another datastore. For example, query a list of OpenTable restaurants then pass the output of those results into an OpenTable availability Datastore to see what times are available tonight.\n\n        Explode (1 to n)\n        Similar to Pipe, except the output of each Datastore is split into muliple inputs to the next Datastore. For example, explode the OpenTable restaurant list into multiple availability checks for each restaurant — i.e, perhaps you want to see which days have a 6:30pm - 7:30pm availability over the next two weeks.\n\n        Collapse (n to 1)\n        This is the exact opposite of Explode, allowing multiple outputs to be condensed into a smaller collection of inputs. For example, if you want to query concert listings only on the days with 6:30-7:30pm restaurant availability, use Collapse to send only the available days through to the concert query.\n\n        Save (n)\n        Persist the data from your stream into any format. You can even inject multiple saves at different stages along the stream.\n      ")])],-1)}));function m(e,t,o,m,h,f){var N=(0,a.resolveComponent)("MainHeader"),V=(0,a.resolveComponent)("SubHeader"),x=(0,a.resolveComponent)("ActionButtons"),v=(0,a.resolveComponent)("inline-svg"),y=(0,a.resolveComponent)("AboveTheFold"),T=(0,a.resolveComponent)("MainLayout");return(0,a.openBlock)(),(0,a.createBlock)(T,{class:"ChromeAlive",showPadding:!1},{default:(0,a.withCtx)((function(){return[(0,a.createVNode)(y,null,{default:(0,a.withCtx)((function(){return[(0,a.createVNode)(N,{productKey:"stream"},{default:(0,a.withCtx)((function(){return[(0,a.createTextVNode)("Ulixee Stream")]})),_:1}),(0,a.createTextVNode)(),(0,a.createVNode)(V,null,{default:(0,a.withCtx)((function(){return[(0,a.createTextVNode)("\n        Query and Transform Data Across"),r,(0,a.createTextVNode)("\n        Many Different Sources and Formats\n      ")]})),_:1}),(0,a.createTextVNode)(),l,(0,a.createTextVNode)(),(0,a.createVNode)(x,{productKey:"stream"}),(0,a.createTextVNode)(),(0,a.createElementVNode)("div",s,[(0,a.createVNode)(v,{src:n(60338),height:"65",class:"absolute top-0 left-[20%]"},null,8,["src"]),(0,a.createTextVNode)(),(0,a.createVNode)(v,{src:n(60338),height:"65",class:"absolute top-0 right-[25%]"},null,8,["src"]),(0,a.createTextVNode)(),(0,a.createVNode)(v,{src:n(36934),height:"70",class:"absolute bottom-[-3px] right-[25%]"},null,8,["src"]),(0,a.createTextVNode)(),i,(0,a.createTextVNode)(),c,(0,a.createTextVNode)()])]})),_:1}),(0,a.createTextVNode)(),u,(0,a.createTextVNode)(),d,(0,a.createTextVNode)(),p]})),_:1})}var h=n(59697),f=n(11692),N=n(32630),V=n(50882),x=n(96930);const v=a.defineComponent({components:{InstallIt:h.Z,Dependencies:f.Z,UseIt:N.Z,Command:V.Z,MainHeader:x.cC,SubHeader:x.bU,AboveTheFold:x.JS,ActionButtons:x.EY}});var y=n(83744);const T=(0,y.Z)(v,[["render",m],["__scopeId","data-v-d4e55be6"]]),b=T},60338:(e,t,n)=>{e.exports=n.p+"img/datastore.efc3a67a.svg"},36934:(e,t,n)=>{e.exports=n.p+"img/transformer.e43cc5d1.svg"}}]);
//# sourceMappingURL=603.bfd4a7d0.js.map