{
  "content": "<h1 id=\"awaiteddom--storage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#awaiteddom--storage\">#</a><a href=\"/docs/hero/basic-client/awaited-dom\">AwaitedDOM</a> <span>/</span> Storage</h1>\n<div class='overview'>The <strong><code>Storage</code></strong> interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.</div>\n<div class='overview'>To manipulate, for instance, the session storage for a domain, a call to <code>Window.sessionStorage</code> is made; whereas for local storage the call is made to <code>Window.localStorage</code>.</div>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"length\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#length\">#</a>.length <div class=\"specs\"><i>W3C</i></div></h3>\n<p>Returns an integer representing the number of data items stored in the <code>Storage</code> object.</p>\n<h4 id=\"type-promisenumber\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-promisenumber\">#</a><strong>Type</strong>: <code>Promise&#x3C;number></code></h4>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<h3 id=\"clear\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#clear\">#</a>.clear <em>()</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>When invoked, will empty all keys out of the storage.</p>\n<h4 id=\"returns-promiseundefined\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseundefined\">#</a><strong>Returns</strong>: <code>Promise&#x3C;undefined></code></h4>\n<h3 id=\"getItem\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#getItem\">#</a>.getItem <em>(key)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>When passed a key name, will return that key's value.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>key <code>string</code>. A <code>string</code> containing the name of the key you want to retrieve the value of.</li>\n</ul>\n<h4 id=\"returns-promisestring\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisestring\">#</a><strong>Returns</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"key\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#key\">#</a>.key <em>(index)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>When passed a number <code>n</code>, this method will return the name of the nth key in the storage.</p>\n<h4 id=\"arguments-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-1\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>index <code>number</code>. An integer representing the number of the key you want to get the name of. This is a zero-based index.</li>\n</ul>\n<h4 id=\"returns-promisestring-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promisestring-1\">#</a><strong>Returns</strong>: <code>Promise&#x3C;string></code></h4>\n<h3 id=\"removeItem\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#removeItem\">#</a>.removeItem <em>(key)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>When passed a key name, will remove that key from the storage.</p>\n<h4 id=\"arguments-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-2\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>key <code>string</code>. A <code>string</code> containing the name of the key you want to remove.</li>\n</ul>\n<h4 id=\"returns-promiseundefined-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseundefined-1\">#</a><strong>Returns</strong>: <code>Promise&#x3C;undefined></code></h4>\n<h3 id=\"setItem\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#setItem\">#</a>.setItem <em>(key, value)</em> <div class=\"specs\"><i>W3C</i></div></h3>\n<p>When passed a key name and value, will add that key to the storage, or update that key's value if it already exists.</p>\n<h4 id=\"arguments-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-3\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>key <code>string</code>. A <code>string</code> containing the name of the key you want to create/update.</li>\n<li>value <code>string</code>. A <code>string</code> containing the value you want to give the key you are creating/updating.</li>\n</ul>\n<h4 id=\"returns-promiseundefined-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#returns-promiseundefined-2\">#</a><strong>Returns</strong>: <code>Promise&#x3C;undefined></code></h4>",
  "title": " <span>/</span> Storage",
  "subtitles": [
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": ".length <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#length"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    },
    {
      "depth": 3,
      "value": ".clear <em>()</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#clear"
    },
    {
      "depth": 3,
      "value": ".getItem <em>(key)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#getItem"
    },
    {
      "depth": 3,
      "value": ".key <em>(index)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#key"
    },
    {
      "depth": 3,
      "value": ".removeItem <em>(key)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#removeItem"
    },
    {
      "depth": 3,
      "value": ".setItem <em>(key, value)</em> <div class=\"specs\"><i>W3C</i></div>",
      "anchor": "#setItem"
    }
  ]
}