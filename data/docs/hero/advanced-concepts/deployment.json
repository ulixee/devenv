{
  "content": "<h1 id=\"deployment\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#deployment\">#</a>Deployment</h1>\n<p>Hero's architecture is split into two processes: a Client and a Core. It's recommended that you read <a href=\"/docs/hero/advanced-concepts/client-vs-core\">client vs core</a> to understand the difference.</p>\n<p>When you start to think about deploying Hero onto a server, you have a few options:</p>\n<h2 id=\"launch-a-ulixee-cloud\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#launch-a-ulixee-cloud\">#</a>Launch a Ulixee Cloud</h2>\n<p>The easiest solution is to use the <code>@ulixee/cloud</code> package. See details of the Ulixee Cloud <a href=\"https://ulixee.org/docs/cloud\">here</a>.</p>\n<p>You can either launch our pre-built <a href=\"https://github.com/ulixee/ulixee/tree/main/cloud/tools/docker\">docker</a> image, or start Ulixee Cloud via a simple script. Make sure to open the port you allocate on any firewall that a client might have to pass through:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-javascript\">const { CloudNode } = require('@ulixee/cloud');\n\n(async () => {\n  const cloudNode = new CloudNode();\n  await cloudNode.listen({ port: 7007 });\n})();\n</code></pre>\n<h3 id=\"setting-up-the-client\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#setting-up-the-client\">#</a>Setting Up the Client</h3>\n<p>Your <a href=\"/docs/hero/basic-client/hero\">Hero</a> instance must be configured to point at this Remote Core (and any others you've set up).</p>\n<p>NOTE: you can use the <code>@ulixee/hero</code> npm package if you don't want to install a full browser engine on the machine coordinating all your scrapes. That example is shown below.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-javascript\">const Hero = require('@ulixee/hero');\n\n(async () => {\n  const hero = new Hero({\n    connectionToCore: {\n      host: `${SERVERIP}:7007`,\n    },\n  });\n\n  await hero.goto('https://ulixee.org');\n})().catch(console.log);\n</code></pre>\n<h2 id=\"fullstack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#fullstack\">#</a>Fullstack</h2>\n<p>If you want to run Hero all in one process, you'll want to run a fullstack deployment. Make sure you add both client and core to your project.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/hero @ulixee/hero-core\n</code></pre>\n<p>To connect your client and core, you'll create a transport bridge that will pipe commands back and forth.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-javascript\">import HeroCore from '@ulixee/hero-core';\nimport { TransportBridge } from '@ulixee/net';\nimport { ConnectionToHeroCore } from '@ulixee/hero';\n\nconst bridge = new TransportBridge();\nconst connectionToCore = new ConnectionToHeroCore(bridge.transportToCore);\n\nconst heroCore = new HeroCore();\nheroCore.addConnection(bridge.transportToClient);\n\nasync function main() {\n  // hero will connect directly\n  const hero = new Hero({ connectionToCore });\n  await hero.goto('https://ulixee.org');\n}\n</code></pre>\n<h2 id=\"integrate-with-a-node-https-server\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#integrate-with-a-node-https-server\">#</a>Integrate with a node Http(s) Server</h2>\n<p>If you have an existing HTTP server and you want to run your client code separately, you can integrate with an Http/Https server (eg, you might do this to load balance a large volume of scrapes).</p>\n<p>Add <code>@ulixee/hero-core</code> and <code>@ulixee/net</code> to your server project:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/hero-core @ulixee/net\n</code></pre>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import HeroCore from '@ulixee/hero-core';\nimport { WsTransportToClient } from '@ulixee/net';\nimport * as WebSocket from 'ws';\nimport * as http from 'http';\nimport * as https from 'https';\n\nconst heroCore = new HeroCore();\n\n// Attach Hero to your Http or Https Server\nasync function bindHeroCore(yourHttpServer: http.Server | https.Server) {\n  \n  const wsServer = new WebSocket.Server({\n    server: yourHttpServer,\n  });\n  wsServer.on('connection', (ws, req) => {\n    // OPTIONAl: it's configured to listen on a path\n    if (req.url.startsWith('/hero')) {\n      const transport = new WsTransportToClient(ws, req);\n      heroCore.addConnection(transport);\n    }\n  });\n}\n</code></pre>\n<p>Add <code>@ulixee/hero</code> to your client project:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/hero\n</code></pre>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">// Connect to your server IP and port as configured above\nasync function runHero(serverIpAndPort: string) {\n  // hero will dial your IP:PORT/&#x3C;OPTIONAL PATH>\n  const hero = new Hero({ connectionToCore: { host: `${serverIpAndPort}/hero` } });\n  await hero.goto('https://ulixee.org');\n}\n</code></pre>\n<p>NOTE: If you don't have an existing Http server, a normal NodeJs server will suffice.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import * as http from 'http';\n\nconst server = new http.Server();\nawait new Promise(resolve => server.listen(8080, resolve));\n</code></pre>\n<h2 id=\"secure-deployment-via-nginx-ssl-and-basic-auth\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#secure-deployment-via-nginx-ssl-and-basic-auth\">#</a>Secure deployment via Nginx, SSL and Basic Auth</h2>\n<p>When publically exposing a port, e.g. for <code>@ulixee/cloud</code>, you should make sure that (1) traffic is secured via SSL (default websocket communication of hero is without any encryption) and that (2) only your services can access the port.</p>\n<p>An nginx reverse proxy provides a solution for both problems: Adding SSL via Let's Encrypt (free) and securing access by both IP and Basic Authentication (username and password).</p>\n<p>Prerequisites: You have to own a domain in order to obtain an SSL certificate. You could setup an A record for a subdomain, if you'd like to use the root domain for something else. The following code examples have been tested on Ubuntu Ubuntu 22 LTS.</p>\n<h4 id=\"step-by-step\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-by-step\">#</a>Step-by-step:</h4>\n<ol>\n<li>Install nginx for our proxy solution: <code>sudo apt-get  install nginx</code></li>\n<li>Install cerbot for generating SSL certificates: <code>sudo apt install certbot python3-certbot-nginx</code></li>\n<li>Obtain SSL certificate: <code>sudo certbot certonly --nginx</code></li>\n<li>Create an Nginx configuration - make sure to replace <code>your_domain.com</code> with your domain (previously chosen for the SSL certificate) and <code>xx.xx.xxx.xxx</code> with the IP addresses you intend to use: <code>sudo nano /etc/nginx/sites-available/websocket</code> and add the following:</li>\n</ol>\n<pre class=\"ulixeeTheme\"><code class=\"language-console\">server {\n    listen 443 ssl;\n    server_name your_domain.com;\n\n    ssl_certificate /etc/letsencrypt/live/your_domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/your_domain.com/privkey.pem;\n\n    # add IP addresses to allow\n    allow xx.xx.xxx.xxx;\n    allow xx.xx.xxx.xxx;\n    deny all;\n    \n    location / {\n        auth_basic \"Restricted Access\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n        \n        proxy_pass http://localhost:1818;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n    }\n}\n</code></pre>\n<ol start=\"5\">\n<li>Choose a username for Basic Auth - replace <code>username</code> with your chosen username: <code>sudo sh -c \"echo -n 'username:' >> /etc/nginx/.htpasswd\"</code></li>\n<li>Choose a password for Basic Auth: <code>sudo sh -c \"openssl passwd -apr1 >> /etc/nginx/.htpasswd\"</code></li>\n<li>Activate the configuration via a symlink, test it and on success, restart the Nginx service:</li>\n</ol>\n<pre class=\"ulixeeTheme\"><code class=\"language-console\">sudo ln -s /etc/nginx/sites-available/websocket /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>\n<ol start=\"8\">\n<li>Make sure <code>hero-cloud</code> is running locally on port <code>1818</code> (for <code>docker run</code> use <code>-p \"127.0.0.1:1818:1818\"</code>) - you could use any other port, but you have to set it in the Nginx configuration file above.</li>\n<li>Connect via <code>wss://username:password@your_domain.com</code> instead of <code>ws://your_domain:port</code></li>\n</ol>",
  "title": "Deployment",
  "subtitles": [
    {
      "depth": 2,
      "value": "Launch a Ulixee Cloud",
      "anchor": "#launch-a-ulixee-cloud"
    },
    {
      "depth": 3,
      "value": "Setting Up the Client",
      "anchor": "#setting-up-the-client"
    },
    {
      "depth": 2,
      "value": "Fullstack",
      "anchor": "#fullstack"
    },
    {
      "depth": 2,
      "value": "Integrate with a node Http(s) Server",
      "anchor": "#integrate-with-a-node-https-server"
    },
    {
      "depth": 2,
      "value": "Secure deployment via Nginx, SSL and Basic Auth",
      "anchor": "#secure-deployment-via-nginx-ssl-and-basic-auth"
    }
  ]
}