{
  "content": "<h1 id=\"troubleshooting\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#troubleshooting\">#</a>Troubleshooting</h1>\n<h3 id=\"installation-errors-or-enoent\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#installation-errors-or-enoent\">#</a>Installation Errors or ENOENT</h3>\n<p>Hero operates with a few different spawned processes:</p>\n<h4 id=\"browser-emulators\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#browser-emulators\">#</a>Browser Emulators</h4>\n<p>When you install Hero, it also downloads a recent version of Chrome and emulator \"data files\" to mask automated and headless usage. Details of the underlying [Browser Emulators]](<a href=\"https://github.com/ulixee/hero/tree/main/plugins/default-browser-emulator\">https://github.com/ulixee/hero/tree/main/plugins/default-browser-emulator</a>) can be found in the <a href=\"https://github.com/ulixee/unblocked\">Unblocked</a> project.</p>\n<p>Browsers will be saved to a shared location on each OS. Each browser version will be downloaded only once and can be shared across multiple Hero npm installations.</p>\n<ul>\n<li>Mac: ~/Library/Cache/</li>\n<li>Linux: ~/.cache (environment variable XDG_CACHE_HOME)</li>\n<li>Windows: ~/AppData/Local (environment variable LOCALAPPDATA)</li>\n</ul>\n<h3 id=\"debugging-logs\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#debugging-logs\">#</a>Debugging Logs</h3>\n<p>By default, Hero logs everything to a <a href=\"/docs/hero/advanced-concepts/sessions\">Session</a> database that is created per Hero instance. The SessionLogs table contains all debug logs.</p>\n<p>To output logs to the console during operation, you can set the environmental variable <code>DEBUG=ulx</code>. If you want to include all Devtools Protocol Messages as well, you can add <code>DEBUG=ulx,ulx:devtools</code>, or <code>DEBUG=ulx*</code>.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">process.env.DEBUG = \"ulx\";\nimport Hero from '@ulixee/hero';\n\n(async () => {\n  const hero = new Hero();\n  await hero.goto('https://url.com');\n})();\n</code></pre>\n<p>If you'd like to customize log output, you can inject your own logger so long as it supports these methods:</p>\n<ul>\n<li><code>boundContext: any;</code>: the context data bound to the given logger</li>\n<li><code>stats(action: string, data?: ILogData): number</code></li>\n<li><code>info(action: string, data?: ILogData): number</code></li>\n<li><code>warn(action: string, data?: ILogData): number</code></li>\n<li><code>error(action: string, data?: ILogData): number</code></li>\n<li><code>createChild(module: NodeModule, boundContext: any): ILog</code> Must return a new logger that retains the given boundContext state.</li>\n</ul>\n<p><em><em>NOTE:</em></em> you must initialize this Logger BEFORE any Hero code is accessed.</p>\n<p>For example:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const debug = require('debug')('MyHero');\nconst Logger = require('@ulixee/commons/Logger');\n\nlet logId = 0;\n\nclass CustomLogger {\n  boundContext: any;\n  level: string;\n  constructor(module, boundContext) {\n    this.boundContext = boundContext;\n    this.filename = module.filename;\n  }\n  stats(action, data) {\n    debug(`STATS ${action}`, data);\n    return (logId += 1);\n  }\n  info(action, data) {\n    debug(`INFO ${action}`, data);\n    return (logId += 1);\n  }\n  warn(action, data) {\n    debug(`WARN ${action}`, data);\n    return (logId += 1);\n  }\n  error(action, data) {\n    debug(`ERROR ${action}`, data);\n    return (logId += 1);\n  }\n  createChild(module, boundContext) {\n    const Constructor = this.constructor;\n    // @ts-ignore\n    return new Constructor(module, {\n      ...this.boundContext,\n      ...boundContext,\n    });\n  }\n  flush() {}\n}\n\ninjectLogger(module => {\n  return {\n    log: new CustomLogger(module),\n  };\n});\n</code></pre>\n<p>From your main script:</p>\n<pre class=\"ulixeeTheme\"><code>require('./CustomLogger.js');\nconst HeroCore = require('@ulixee/hero-core');\n\n// your code...\n\n</code></pre>\n<h3 id=\"problems-after-an-upgrade\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#problems-after-an-upgrade\">#</a>Problems after an upgrade</h3>\n<p>If you have problems after upgrading, <a href=\"https://github.com/ulixee/hero/issues\">let us know</a>.</p>",
  "title": "Troubleshooting",
  "subtitles": [
    {
      "depth": 3,
      "value": "Installation Errors or ENOENT",
      "anchor": "#installation-errors-or-enoent"
    },
    {
      "depth": 3,
      "value": "Debugging Logs",
      "anchor": "#debugging-logs"
    },
    {
      "depth": 3,
      "value": "Problems after an upgrade",
      "anchor": "#problems-after-an-upgrade"
    }
  ]
}