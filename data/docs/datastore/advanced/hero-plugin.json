{
  "content": "<h1 id=\"heroextractorplugin\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#heroextractorplugin\">#</a>HeroExtractorPlugin</h1>\n<blockquote>\n<p>HeroExtractorPlugin supercharges your datastore Extractor with full Hero capabilities. It also allow you to organize your script into two execution stages - the \"live\" Crawler Extractor and a second Extractor operating on the cacheable Crawler output.</p>\n</blockquote>\n<p>Datastore Extractors with HeroExtractorPlugin allow you break down a script into a \"live\" Crawler Extractor and a second \"offline\" Extractor operating on the cacheable Crawler output.</p>\n<p>The HeroExtractorPlugin adds two options to a Extractor's <code>run</code> callback:</p>\n<ul>\n<li>A <a href=\"https://ulixee.org/docs/hero\">Hero</a> constructor to interact with a website. The constructor will automatically connect to the local Hero Core. You can collect all output in this phase, or you can choose to detach assets like <a href=\"https://ulixee.org/docs/hero/docs/hero/advanced-client/detached-resources\">Resources</a>, <a href=\"https://ulixee.org/docs/hero/docs/hero/advanced-client/detached-elements\">HTML Elements</a> and <a href=\"https://ulixee.org/docs/hero/basic-client/hero-replay#getSnippet\">Data Snippets</a> that can be extracted later.</li>\n<li>A <a href=\"https://ulixee.org/docs/hero/docs/hero/basics-client/hero-replay\">HeroReplay</a> constructor that can be supplied with the sessionId of a previous Hero run. A constructed instance will automatically connect to the local Hero Core. You can use this class to pull out data from your <a href=\"https://ulixee.org/docs/hero/docs/hero/basics-client/hero-replay\">Detached assets</a> (ie, you don't have to run your logic browser-side). It also allows you to run your extraction logic as a unit, which enables you to re-run it on assets collected from your Crawler until your logic works correctly.</li>\n</ul>\n<h2 id=\"getting-started\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#getting-started\">#</a>Getting Started</h2>\n<p>Writing a Hero script with a Datastore Extractor is very similar to writing a normal Hero script, except it must be contained within a callback, and you have make it the default export.</p>\n<p>You can run this script as a regular node script and it will run the callback. However, this structure also allows us to load it into a Datastore to interact with other Extractors and Tables, or deploy it onto a server (<a href=\"https://ulixee.org/docs/hero/docs/cloud-node\">CloudNode</a>).</p>\n<p>To use HeroExtractorPlugin, import the plugin and include it in the <code>plugins</code> vararg array of your Datastore Extractor constructor.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { HeroExtractorPlugin, Crawler } from '@ulixee/datastore-plugins-hero';\nexport default new Crawler(async context => {\n  const { input, Output, Hero } = context;\n\n  const hero = new Hero();\n  await hero.goto(input.url);\n  const title = await hero.document.title;\n\n  const output = new Output();\n  output.title = title;\n  output.body = await hero.document.body.textContent;\n  return hero;\n}, HeroExtractorPlugin);\n</code></pre>\n<h2 id=\"utilizing-two-part-extraction\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#utilizing-two-part-extraction\">#</a>Utilizing Two-Part Extraction</h2>\n<p>To use the <a href=\"https://ulixee.org/docs/hero/basics-client/hero-replay\">HeroReplay</a> extraction phase, you'll simply add an additional Extractor that uses a crawler:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { Crawler, Extractor, HeroExtractorPlugin } from '@ulixee/datastore-plugins-hero';\n\nconst datastore = new Datastore({\n  crawlers: {\n    ulixee: new Crawler(async context => {\n      const { Hero } = context;\n      const hero = new Hero();\n      await hero.goto('https://ulixee.org');\n      console.log(await hero.sessionId);\n      await document.querySelector('h1').$addToDetachedElements('h1');\n      return hero;\n    }, HeroExtractorPlugin),\n  },\n  extractors: {\n    ulixee: new Extractor(async context => {\n      const { input, Output, HeroReplay } = context;\n      const maxTimeInCache = input.maxTimeInCache ?? 5 * 60;\n      const crawler = datastore.crawlers.ulixee;\n      const heroReplay = await HeroReplay.fromCrawler(crawler, { input: { maxTimeInCache } });\n      const h1 = await heroReplay.detachedElements.get('h1');\n      const output = new Output();\n      output.title = h1.textContent;\n    }, HeroExtractorPlugin),\n  },\n});\nexport default datastore;\n</code></pre>\n<p>If you have a prior Hero SessionId to replay, you can run ONLY the <code>Extractor</code> phase by running as follows:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">node ./heroExtractor.js --maxTimeInCache=30\n</code></pre>\n<h2 id=\"changes-to-extractorcontext\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#changes-to-extractorcontext\">#</a>Changes to ExtractorContext</h2>\n<p>The HeroExtractorPlugin for Hero adds \"automatically connecting\" Hero and Hero Replay constructors.</p>\n<h3 id=\"run-hero\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#run-hero\">#</a>run <em>(extractorContext)</em></h3>\n<ul>\n<li>extractorContext.Hero <code>Hero</code>. <a href=\"https://ulixee.org/docs/hero/basic-client/hero\">Hero</a> constructor that is automatically connected and cleaned up.</li>\n<li>extractorContext.HeroReplay <code>HeroReplay</code>. <a href=\"https://ulixee.org/docs/hero/basic-client/hero-replay\">HeroReplay</a> constructor that's automatically connected and cleaned up. Includes an extra static function <code>fromCrawler</code> to create an instance from a <a href=\"/docs/datastore/basics/crawler\">Crawler</a> instance.\n<ul>\n<li><code>static fromCrawler_(crawler, options)_</code>. Arguments: <a href=\"/docs/datastore/basics/crawler\">crawler</a> - a Crawler instance, and options: all options that can be passed to a Extractor <code>run</code> callback. Options will be merged with the calling ExtractorContext. Input values provided will be merged with existing input values.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<h3 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>new Extractor <em>(runCallback | extractorComponents)</em></h3>\n<p>The HeroExtractorPlugin modifies the Extractor constructor with the following changes:</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>run: <code>function</code>(extractorContext): <code>Promise&#x3C;any></code>. Adds a Hero and HeroReplay constructor to the run function as per <a href=\"#run-hero\">above</a>.</li>\n</ul>\n<h2 id=\"hosted-services\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#hosted-services\">#</a>Hosted Services</h2>\n<p>The HeroExtractorPlugin adds a \"ReplayRegistry\" to store sessions created by Datastore Queries so they can be replayed in a cluster environment. This is transparent to any work the user must perform.</p>",
  "title": "HeroExtractorPlugin",
  "subtitles": [
    {
      "depth": 2,
      "value": "Getting Started",
      "anchor": "#getting-started"
    },
    {
      "depth": 2,
      "value": "Utilizing Two-Part Extraction",
      "anchor": "#utilizing-two-part-extraction"
    },
    {
      "depth": 2,
      "value": "Changes to ExtractorContext",
      "anchor": "#changes-to-extractorcontext"
    },
    {
      "depth": 3,
      "value": "run <em>(extractorContext)</em>",
      "anchor": "#run-hero"
    },
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 3,
      "value": "new Extractor <em>(runCallback | extractorComponents)</em>",
      "anchor": "#constructor"
    },
    {
      "depth": 2,
      "value": "Hosted Services",
      "anchor": "#hosted-services"
    }
  ]
}