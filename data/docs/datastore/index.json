{
  "content": "<h1 id=\"introduction\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#introduction\">#</a>Introduction</h1>\n<blockquote>\n<p>Datastores are structured, deployable \"micro-databases\" that combine private data sources, live-extracted web data and static metadata. Out of the box, they support charging per query using the <a href=\"https://argonprotocol.org\">Argon</a> currency. Best of all, any published Datastores can be stacked on top of each other using our \"cloning\" process.</p>\n</blockquote>\n<h2 id=\"core-features\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#core-features\">#</a>Core Features</h2>\n<ul>\n<li><strong>Structured APIs:</strong> Datastores create \"constantly refreshing\" databases of specialized data structures - for instance, a Travel database, or a Jobs database. They're a combination of static metadata tables, filtered views of internal data-sources, and dynamically retrieved web data.</li>\n<li><strong>Out of Box Payments:</strong> Datastore costs can be completely customized for each published data entity: whether per Kilobyte of information, per extraction, or per query. You can get started very simply though - no need to setup a bank account or create customer contracts. Payments are made on a single query basis using the <a href=\"https://argonprotocol.org\">Argon</a>, a fiat-independent stablecoin that you can export to your native currency whenever you choose.</li>\n<li><strong>Smart Caching:</strong> Datastores automatically cache extracted data so you can reuse more complex data extraction across multiple client queries. You can also choose to allow the query-er to define how fresh the data should be.</li>\n<li><strong>Postgres Compatibility:</strong> Datastores also support PostgreSQL natively (including payment), so can be tested out and integrated across programming languages.</li>\n</ul>\n<h2 id=\"payments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#payments\">#</a>Payments</h2>\n<p>Datastores are designed to be monetized, but it's your choice. If you set a price per query, the user will be prompted to pay using Argon. Learn more about setting up payments in the <a href=\"/docs/datastore/basics/payments\">Datastore Payments</a> guide.</p>\n<h2 id=\"structured-data\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#structured-data\">#</a>Structured Data</h2>\n<p>Datastores are designed to be structured, so you can easily query them using the Ulixee Desktop or the <a href=\"https://ulixee.org/docs/client\">@ulixee/client</a> library. Users will get a type-checked response using SQL and Typescript definitions.</p>\n<p>They are built around these core data entities:</p>\n<ol>\n<li><strong>Extractors:</strong> Functions that take input and return output <a href=\"/docs/datastore/basics/extractor\">more</a>.</li>\n<li><strong>Crawlers:</strong> Web crawlers that load pages in a format that can be re-used and cached <a href=\"/docs/datastore/basics/crawler\">more</a>.</li>\n<li><strong>Tables:</strong> Database tables that can be queried and joined with your extractors <a href=\"/docs/datastore/basics/table\">more</a>.</li>\n<li><strong>Cron Jobs:</strong> Scheduled tasks that can run trigger Extractors or Crawlers to refresh data (<strong>FUTURE FEATURE</strong>).</li>\n</ol>\n<h2 id=\"enhanced-developer-experience\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#enhanced-developer-experience\">#</a>Enhanced Developer Experience</h2>\n<p>The structure of Datastores allows us to enhance the developer experience of building and testing scraping scripts using the <a href=\"https://ulixee.org/docs/hero\">Hero</a> scraping browser. It allows us to do things like:</p>\n<ul>\n<li>Automatically rerun a script during development as you change it.</li>\n<li>Timetravel through the script to see the exact state of the browser at any point.</li>\n<li>Rotate inputs to try out a variety of IPs, parameters, and more to make sure you can handle edge cases.</li>\n<li>Test the extraction of 100s of different potential results pages and ensure your Output follows the same structure.</li>\n<li>Spawn new Extractors from the current one if you need to parallelize following links.</li>\n</ul>\n<h2 id=\"installation\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#installation\">#</a>Installation</h2>\n<p>To get started using Datastore in your project, use the following commands:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npm i --save @ulixee/datastore\n</code></pre>\n<p>It's your responsibility to ensure your Ulixee development environment is setup, such as installing and running <a href=\"https://ulixee.org/docs/cloud\"><code>@ulixee/cloud</code></a>.</p>\n<h2 id=\"usage-example\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#usage-example\">#</a>Usage Example</h2>\n<p>The simplest Datastore is initialized with a single Extractor:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">export default new Datastore({\n  extractors: {\n    default: new Extractor(ctx => {\n      ctx.Output.emit({ message: `Hello ${ctx.input.firstName}` });\n    }),\n  },\n});\n</code></pre>\n<p>Save that script to your filesystem (i.e., simple.js), and start your datastore:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npx @ulixee/datastore start &#x3C;path to datastore>\n\n# or watching changes\nnpx @ulixee/datastore start --watch &#x3C;path to datastore>\n</code></pre>\n<p>You can query it using Ulixee Desktop or the @ulixee/client library.</p>",
  "title": "Introduction",
  "subtitles": [
    {
      "depth": 2,
      "value": "Core Features",
      "anchor": "#core-features"
    },
    {
      "depth": 2,
      "value": "Payments",
      "anchor": "#payments"
    },
    {
      "depth": 2,
      "value": "Structured Data",
      "anchor": "#structured-data"
    },
    {
      "depth": 2,
      "value": "Enhanced Developer Experience",
      "anchor": "#enhanced-developer-experience"
    },
    {
      "depth": 2,
      "value": "Installation",
      "anchor": "#installation"
    },
    {
      "depth": 2,
      "value": "Usage Example",
      "anchor": "#usage-example"
    }
  ]
}