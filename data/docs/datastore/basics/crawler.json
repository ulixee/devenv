{
  "content": "<h1 id=\"crawler\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#crawler\">#</a>Crawler</h1>\n<p>A Crawler is a specialized <a href=\"/docs/datastore/basics/extractor\">Function</a> that allows you to scrape a webpage and automatically cache results. The following is a simple example:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { Crawler, HeroExtractorPlugin } from '@ulixee/datastore-plugins-hero';\n\nconst crawler = new Crawler(async context => {\n  const hero = await new context.Hero();\n  await hero.goto('https://ulixee.org');\n\n  const resources = await hero.activeTab.waitForResources({ url: 'index.json' });\n  for (const resource of resources) await resource.$addToDetachedResources('xhr');\n  return hero;\n}, HeroExtractorPlugin);\n</code></pre>\n<p>Crawlers automatically create a local [Table] to cache results. This means you can re-use the last Crawl by default. A desired \"age\" can be specified by including a <code>maxTimeInCache</code> parameter. <code>maxTimeInCache</code> defaults to 10 minutes. To skip the cache, you can supply 0, or include <code>disableCache: true</code> in the constructor arguments.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">const [crawl] = await crawler.stream({ input: { maxTimeInCache: 60 } });\nconst heroReplay = await HeroReplay(crawl);\n</code></pre>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<h3 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>new Crawler <em>(function | crawlerComponents, ...plugins[])</em></h3>\n<p>Creates a new Crawler instance.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<p>The first argument can be a single callback function matching the <code>run</code> callback below, or an object containing the following properties.</p>\n<ul>\n<li>run <code>function</code>(context: <a href=\"/docs/datastore/basics/extractor-context\">ExtractorContext</a>): <code>Promise&#x3C;Crawler></code>. A function that contains your script to run. The parameter is a <a href=\"/docs/datastore/basics/extractor-context\">ExtractorContext</a> that provides access to <a href=\"/docs/datastore/basics/input\">input</a>.\n<ul>\n<li>NOTE: Crawlers do not specify <code>Output</code>, but must return an object implementing <code>toCrawlerOutput(): Promise&#x3C;ICrawlerOutputSchema></code>. This is an object containing <code>version</code>, <code>sessionId</code> and <code>crawler</code>.</li>\n</ul>\n</li>\n<li>schema <code>IExtractorSchema</code>. Optional <a href=\"/docs/datastore/advanced/extractor-schemas\">schema</a> defining the type-checked <em>input</em> (only) parameters for the function. Output is not supported for Crawlers.</li>\n<li>disableCache <code>boolean</code>. Optional parameter to disable automatic caching of results.</li>\n<li>basePrice <code>number</code>. Optional price per access. It's called \"base price\" because a query might join multiple data entities.</li>\n<li>name <code>string</code>. Optional name for this Crawler, primarily used only if defining a Crawler outside a Datastore.</li>\n<li>description <code>string</code>. Optional description for this function, primarily for documentation website</li>\n</ul>\n<p>The second argument is a list of zero or more plugins.</p>\n<ul>\n<li>plugins <code>Array&#x3C;Plugin></code>. Optional. A list of <a href=\"/docs/datastore/advanced/plugins\">plugin-compatible classes</a>.</li>\n</ul>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"cache\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cache\">#</a>cache</h3>\n<p>A Table automatically created to store cached results. The table name is <code>crawler_cache_${name}</code>, with columns:</p>\n<ul>\n<li>version <code>string</code>. The output Crawler version.</li>\n<li>sessionId <code>string</code>. The output Crawler sessionId.</li>\n<li>crawler <code>string</code>. The output type of Crawler.</li>\n<li>runTime <code>number</code>. The unix Date milliseconds of the crawl runtime.</li>\n<li>input <code>string</code>. A JSON serialization of the input enhanced with typing information (<code>@ulixee/commons/lib/TypeSerializer</code>).</li>\n</ul>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<p>No public methods added from <a href=\"/docs/datastore/basics/extractor\">Extractor</a>.</p>",
  "title": "Crawler",
  "subtitles": [
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 3,
      "value": "new Crawler <em>(function | crawlerComponents, ...plugins[])</em>",
      "anchor": "#constructor"
    },
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": "cache",
      "anchor": "#cache"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    }
  ]
}