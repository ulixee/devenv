{
  "content": "<h1 id=\"extractorschema\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extractorschema\">#</a>ExtractorSchema</h1>\n<blockquote>\n<p>ExtractorSchemas provide a way to add Typescript types, validation and documentation for the Input and Output of a datastore Extractor.</p>\n</blockquote>\n<p>ExtractorSchemas are not a runtime class, but an interface of a few properties to define a Datastore Extractor's Input/Output structure. When you define the input and output of a Extractor, a few things happen:</p>\n<ul>\n<li>Typescript types will be generated and input/output will emit compilation errors</li>\n<li>Runtime validation is performed when parsing input parameters or returning results</li>\n<li>Realtime validation occurs as you add output properties. If a type is wrong, your script will halt and notify you immediately so you don't waste any extra work.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { Extractor, HeroExtractorPlugin } from '@ulixee/datastore-plugins-hero';\nimport { string } from '@ulixee/schema';\n\nexport default new Extractor(\n  {\n    async run(datastore) {\n      const { input, Output, Hero } = datastore;\n\n      const hero = new Hero();\n      await hero.goto(input.url);\n      const title = await hero.document.title;\n\n      const output = new Output();\n      output.title = title;\n      output.resolvedUrl = await hero.url;\n      // ERROR: body expects a string, not a Promise&#x3C;string>!\n      output.body = hero.document.body.textContent;\n    },\n    // ExtractorSchema definition\n    schema: {\n      input: {\n        url: string({ format: 'url' }),\n      },\n      output: {\n        title: string(),\n        body: string(),\n        resolvedUrl: string({ format: 'url' }),\n      },\n      inputExamples: [\n        {\n          url: 'https://example.org',\n        },\n        {\n          url: 'https://ulixee.org',\n        },\n      ],\n    },\n  },\n  HeroExtractorPlugin,\n);\n</code></pre>\n<p>When you package a <code>Datastore</code> (or a <code>Extractor</code> auto-wrapped into a <code>Datastore</code>) for <a href=\"/docs/datastore/overview/deployment\">deployment</a>, a few other type utilities are added:</p>\n<ul>\n<li>\n<p>Types are automatically created so that you can import Datastore Extractor types.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\">npx @ulixee/datastore deploy ./index.js; // Id=test, version=1.0.0\n</code></pre>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import ITypes from '@ulixee/datastore/types';\n\ntype IIndexExtractorSchema = ITypes['test']['default']; // default is the name if auto-packaged\n</code></pre>\n</li>\n<li>\n<p>Typing of parameters and results are automatically referenced when running a Datastore function.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import DatastoreClient from '@ulixee/datastore/lib/DatastoreApiClient';\nconst client = new DatastoreClient('localhost:8080');\nconst result = client.stream('test', '1.0.0', 'default', { url: 'https://ulixee.org ' });\n// result has type inferred automatically.\n</code></pre>\n</li>\n<li>\n<p>Consumers of your <code>Datastore</code> can <code>install</code> your <code>DatastoreVersion</code> and the accompanying types using <code>@ulixee/datastore install &#x3C;DatastoreVersion></code>.</p>\n</li>\n</ul>\n<h2 id=\"documentation-generation\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#documentation-generation\">#</a>Documentation Generation</h2>\n<p>TODO: This feature will come in a follow-on release, and will auto-generate a website with documentation for using a Datastore Extractor. Details come from this ExtractorSchema definition.</p>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"input\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#input\">#</a>input <code>Record&#x3C;string, Any Schema></code></h3>\n<p>Optional input fields definition containing and object of string Keys to <a href=\"/docs/datastore/advanced/schema\">Schema</a> values.</p>\n<h3 id=\"output-recordstring-any-schema--objectschema\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#output-recordstring-any-schema--objectschema\">#</a>output <code>Record&#x3C;string, Any Schema></code> | ObjectSchema</h3>\n<p>Optional definition of Key/<a href=\"/docs/datastore/advanced/schema\">Any Schema</a>, <a href=\"/docs/datastore/advanced/schema#object\">Object</a> to be returned.</p>\n<h3 id=\"inputexamples-recordstring-example-value-or-datautilities-extractor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#inputexamples-recordstring-example-value-or-datautilities-extractor\">#</a>inputExamples: <code>Record&#x3C;string, Example Value or DataUtilities Extractor>[]</code></h3>\n<p>Optional array of example input field combinations. Each record contains an object of <a href=\"#input\">input</a> keys mapped to a value of the provided Schema type. There are in-built Data functions to generate dynamic data that are included with the <code>@ulixee/schema</code> library. Extractors importable are:</p>\n<ul>\n<li><code>dateAdd(quantity: number, units: IUnits)</code>: Add to the current date. Units options are <code>'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years'</code>.</li>\n<li><code>dateSubtract(quantity: number, units: IUnits)</code>: Subtract from the current date. Units options are <code>'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years'</code>.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import { Extractor, HeroExtractorPlugin } from '@ulixee/datastore-plugins-hero';\nimport { string, dateAdd } from '@ulixee/schema';\n\nexport default new Extractor({\n  async run(ctx) {\n    // prints 'YYYY-MM-DD' of tomorrow\n    console.log(ctx.input.when);\n  },\n  schema: {\n    input: {\n      when: string({ format: 'date' }),\n    },\n    inputExamples: [{ when: (1, 'days') }],\n  },\n});\n</code></pre>",
  "title": "ExtractorSchema",
  "subtitles": [
    {
      "depth": 2,
      "value": "Documentation Generation",
      "anchor": "#documentation-generation"
    },
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": "input <code>Record&#x3C;string, Any Schema></code>",
      "anchor": "#input"
    },
    {
      "depth": 3,
      "value": "output <code>Record&#x3C;string, Any Schema></code> | ObjectSchema",
      "anchor": "#output-recordstring-any-schema--objectschema"
    },
    {
      "depth": 3,
      "value": "inputExamples: <code>Record&#x3C;string, Example Value or DataUtilities Extractor>[]</code>",
      "anchor": "#inputexamples-recordstring-example-value-or-datautilities-extractor"
    }
  ]
}