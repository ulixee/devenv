{
  "content": "<h1 id=\"datastore\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#datastore\">#</a>Datastore</h1>\n<p>This is the primary class used to create a datastore. The following is a simple example:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore from '@ulixee/datastore';\n\nexport default new Datastore({\n  extractors: {\n    nameOfExtractor: new Extractor(extractorContext => {\n      extractorContext.Output.emit({ message: `Hello ${extractorContext.input.firstName}` });\n    }),\n  },\n});\n</code></pre>\n<p>A Datastore is constructed with one or more <a href=\"/docs/datastore/basics/extractor\">Extractors</a>.</p>\n<h2 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>Constructor</h2>\n<h3 id=\"constructor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#constructor\">#</a>new Datastore <em>(datastoreComponents)</em></h3>\n<p>Creates a new Datastore instance.</p>\n<h4 id=\"arguments\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>id <code>string</code>. The unique id of this Datastore. This will be used in your queries, along with the version. It's required for deployment, but a temporary id will be generated if you \"start\" a Datastore. Ids can contain lowercase letters, numbers and dashes.</li>\n<li>version <code>string</code>. A semver string for the Datastore version. (eg, 1.0.0).</li>\n<li>name <code>string</code>. Optional name for this Datastore to be used in Documentation websites.</li>\n<li>description <code>string</code>. Optional description for this Datastore to be used in Documentation websites.</li>\n<li>storageEngineHost <code>string</code>. The ip:port where storage engine requests should be sent. NOTE: you MUST set this property when deploying into a cluster of nodes.</li>\n<li>extractors: <code>object</code>. An object mapping names to <a href=\"/docs/datastore/basics/extractor\">Extractors</a>.\n<ul>\n<li>key <code>string</code>. A unique name of the function.</li>\n<li>value <code>Extractor</code>. A <a href=\"/docs/datastore/basics/extractor\">Extractor</a> instance.</li>\n</ul>\n</li>\n<li>crawlers: <code>object</code>. An object mapping names to <a href=\"/docs/datastore/basics/crawler\">Crawlers</a>.\n<ul>\n<li>key <code>string</code>. A unique name of the Crawler.</li>\n<li>value <code>Crawler</code>. A <a href=\"/docs/datastore/basics/crawler\">Crawler</a> instance.</li>\n</ul>\n</li>\n<li>tables <code>object</code>. An object mapping names to <a href=\"/docs/datastore/basics/table\">Tables</a>.\n<ul>\n<li>key <code>string</code>. A unique name of the Table.</li>\n<li>value <code>Table</code>. A <a href=\"/docs/datastore/basics/table\">Table</a> instance.</li>\n</ul>\n</li>\n<li>affiliateId <code>string</code>. An optional unique identifier to send with all remoteDatastore queries sent from this Datastore.</li>\n<li>adminIdentity <code>string</code>. A bech32 encoded admin Identity. Grants access to this identity to perform signed <code>Datastore.admin</code> API calls (like managing <a href=\"/docs/datastore/advanced/credits\">Credits</a>). If not included, the <code>adminIdentities</code> of your CloudNode server are the only valid admin Identities for your Datastore.</li>\n<li>authenticateIdentity <code>function</code>. An optional function that can be used to secure access to this Datastore. More details are <a href=\"#authenticateIdentity\">here</a></li>\n<li>onCreated <code>function</code>. A function run when a datastore is installed onto a StorageEngine. This is where you can seed any records in the database. More details are <a href=\"#on-created\">here</a>.</li>\n<li>onVersionMigrated <code>function</code>. A function run when a datastore is installed onto a StorageEngine and there is a previous version. This is a function to perform \"migrations\" and copy any data from the previous version that you want. More details are <a href=\"#on-version-migrated\">here</a></li>\n<li>remoteDatastores <code>{ [name]: url }</code>. An optional key/value of remoteDatastore \"names\" to urls of the remoteDatastore used as part of <a href=\"/docs/datastore/basics/passthrough-extractor\">PassthroughExtractors</a>.</li>\n<li>remoteDatastoreEmbeddedCredits <code>{ [name]: ICredit }</code>. An optional key/value of remoteDatastore \"names\" to <a href=\"/docs/datastore/advanced/credits\">credit</a> details (<code>id</code> and <code>secret</code>). If included, the embedded credits will be used for Payment to the remoteDatastore for consumers of this Datastore.</li>\n</ul>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore, { Extractor } from '@ulixee/datastore';\n\nexport default new Datastore({\n  id: 'test',\n  version: '0.0.1',\n  extractors: {\n    instance: new Extractor({\n      run({ input, Output }) {\n        const output = new Output();\n        output.urlLength = input.url.length;\n      },\n      schema: {\n        input: {\n          url: string({ format: 'url' }),\n        },\n        output: {\n          urlLength: number(),\n        },\n      },\n    }),\n  },\n});\n</code></pre>\n<h2 id=\"properties\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#properties\">#</a>Properties</h2>\n<h3 id=\"metadata-object\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#metadata-object\">#</a>metadata <code>object</code></h3>\n<p>Object containing the definitions of nested Extractors, Crawlers, Tables and settings for this Datastore.</p>\n<h3 id=\"extractors--namestring-extractor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extractors--namestring-extractor\">#</a>extractors <code>{ [name:string]: Extractor}</code></h3>\n<p>Object containing <a href=\"/docs/datastore/basics/extractor\">Extractors</a> keyed by their name.</p>\n<h3 id=\"crawlers--namestring-crawler\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#crawlers--namestring-crawler\">#</a>crawlers <code>{ [name:string]: Crawler}</code></h3>\n<p>Object containing <a href=\"/docs/datastore/basics/crawler\">Crawlers</a> keyed by their name.</p>\n<h3 id=\"tables--namestring-table\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tables--namestring-table\">#</a>tables <code>{ [name:string]: Table}</code></h3>\n<p>Object containing <a href=\"/docs/datastore/basics/table\">Tables</a> keyed by their name.</p>\n<h3 id=\"remote-datastores\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#remote-datastores\">#</a>remoteDatastores <code>{ [name]: url }</code></h3>\n<p>Object containing an optional key/value of remoteDatastore \"names\" to urls of the remoteDatastore used as part of <a href=\"/docs/datastore/basics/passthrough-extractor\">PassthroughExtractors</a>. Urls take the format <code>ulx://&#x3C;CloudAddress>/&#x3C;datastoreId>@v&#x3C;datastoreVersion></code>.</p>\n<h3 id=\"authenticateIdentity\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#authenticateIdentity\">#</a>authenticateIdentity <em>(identity, nonce)</em></h3>\n<p>An optional callback that can be used to secure a Datastore. This method can allow you to issue private Identities to remote Datastore consumers and only allow those users to access your Datastore. An Identity can be created using the <code>@ulixee/crypto</code> cli:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-bash\"> npx @ulixee/crypto identity create\n</code></pre>\n<p>A caller would use the generated Identity to create an authentication message:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import DatastoreApiClient from '@ulixee/datastore/lib/DatastoreApiClient';\nimport Identity from '@ulixee/crypto/lib/Identity';\n\nconst identity = Identity.loadFromFile('~/datastoreAuth.pem');\nlet payment = null; // fill in with payment if needed\n// this authentication message will be passed to the Datastore queries.\nconst authentication = DatastoreApiClient.createExecAuthentication(payment, identity);\nconst client = new DatastoreApiClient();\nawait client.stream('test', '1.0.0', 'extractorName', { authentication });\n</code></pre>\n<p>Your Datastore can then only allow your distributed Identities:</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore from '@ulixee/datastore';\n\nconst whitelist = new Set([`id1xv7empyzlwuvlshs2vlf9eruf72jeesr8yxrrd3esusj75qsr6jqj6dv3p`]);\n\nexport default new Datastore({\n  authenticateIdentity(identity, nonce) {\n    return whitelist.has(identity);\n  },\n});\n</code></pre>\n<p>The Datastore Core will automatically ensure that any calling authentication messages include the following properties before passing the identity and nonce to your <code>authenticateIdentity</code> callback:</p>\n<ul>\n<li>identity <code>string</code>. A bech32 encoded Identity of the caller.</li>\n<li>signature <code>Buffer</code>. A valid Ed25519 signature providing proof of the Identity private key. The signature message is a sha3 of <code>Datastore.exec</code> + any <code>Credits Id</code> + any <code>Micronote Id</code> + the included <code>nonce</code>.</li>\n<li>nonce <code>string</code>. A unique nonce code. This nonce can be used for additional \"unique\" calls validation if desired.</li>\n</ul>\n<h3 id=\"on-created\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#on-created\">#</a>onCreated <em>()</em></h3>\n<p>An optional callback that can be used to bootstrap a Datastore when it's installed onto a Storage Engine. This method allows you to seed tables. It will be called only once.</p>\n<p>The callback is called from the context of the Datastore instance, so you can navigate internal tables and columns.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore from '@ulixee/datastore';\n\nconst whitelist = new Set([`id1xv7empyzlwuvlshs2vlf9eruf72jeesr8yxrrd3esusj75qsr6jqj6dv3p`]);\n\nexport default new Datastore({\n  tables: {\n    events: new Table({\n      schema: {\n        name: string(),\n        date: date(),\n      },\n    }),\n  },\n  async onCreated() {\n    await this.tables.events.insertInternal({\n      name: 'Thanksgiving',\n      birthdate: new Date('2023-11-01'),\n    });\n  },\n});\n</code></pre>\n<h3 id=\"on-version-migrated\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#on-version-migrated\">#</a>onVersionMigrated <em>(previousVersion)</em></h3>\n<p>An optional callback that will be called when a Datastore version is installed onto a Storage Engine where a previous version exists. All storage engines start off empty for each version, so you must copy any data you want to keep from the previous Datastore.</p>\n<p>This callback will only be called once, and only if a previous version is on the cloud where it will be installed. It will be called from the context of the Datastore instance, so you can navigate internal tables and columns.</p>\n<h4 id=\"arguments-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#arguments-1\">#</a><strong>Arguments</strong>:</h4>\n<ul>\n<li>previousVersion <code>Datastore</code>. The previous linked version of this Datastore.</li>\n</ul>\n<p>Below is simple example for migrating data to the new table by filling in the new columns.</p>\n<p>NOTE: since each Datastore version creates a new copy of the table, you can test migrations locally by pointing at your previous version and testing out migrating to a new one.</p>\n<pre class=\"ulixeeTheme\"><code class=\"language-js\">import Datastore from '@ulixee/datastore';\n\nexport default new Datastore({\n  tables: {\n    events: new Table({\n      schema: {\n        name: string(),\n        reason: string({ enum: ['fun', 'work'] }),\n        date: date(),\n      },\n    }),\n  },\n  async onVersionMigrated(previousVersion) {\n    for (const previousEvent of previousEvents) {\n      await this.tables.events.insertInternal(\n        ...previousEvents.map(x => ({\n          ...x,\n          reason: 'fun',\n        })),\n      );\n    }\n  },\n});\n</code></pre>\n<h2 id=\"methods\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\">#</a>Methods</h2>\n<p>No public methods provided.</p>",
  "title": "Datastore",
  "subtitles": [
    {
      "depth": 2,
      "value": "Constructor",
      "anchor": "#constructor"
    },
    {
      "depth": 3,
      "value": "new Datastore <em>(datastoreComponents)</em>",
      "anchor": "#constructor"
    },
    {
      "depth": 2,
      "value": "Properties",
      "anchor": "#properties"
    },
    {
      "depth": 3,
      "value": "metadata <code>object</code>",
      "anchor": "#metadata-object"
    },
    {
      "depth": 3,
      "value": "extractors <code>{ [name:string]: Extractor}</code>",
      "anchor": "#extractors--namestring-extractor"
    },
    {
      "depth": 3,
      "value": "crawlers <code>{ [name:string]: Crawler}</code>",
      "anchor": "#crawlers--namestring-crawler"
    },
    {
      "depth": 3,
      "value": "tables <code>{ [name:string]: Table}</code>",
      "anchor": "#tables--namestring-table"
    },
    {
      "depth": 3,
      "value": "remoteDatastores <code>{ [name]: url }</code>",
      "anchor": "#remote-datastores"
    },
    {
      "depth": 3,
      "value": "authenticateIdentity <em>(identity, nonce)</em>",
      "anchor": "#authenticateIdentity"
    },
    {
      "depth": 3,
      "value": "onCreated <em>()</em>",
      "anchor": "#on-created"
    },
    {
      "depth": 3,
      "value": "onVersionMigrated <em>(previousVersion)</em>",
      "anchor": "#on-version-migrated"
    },
    {
      "depth": 2,
      "value": "Methods",
      "anchor": "#methods"
    }
  ]
}